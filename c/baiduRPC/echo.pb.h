// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace example {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class BenchmarkMessage;
class EchoRequest;
class EchoResponse;

// ===================================================================

class EchoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.EchoRequest) */ {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();

  void Swap(EchoRequest* other);

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const { return New(NULL); }

  EchoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EchoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:example.EchoRequest)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.EchoResponse) */ {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();

  void Swap(EchoResponse* other);

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const { return New(NULL); }

  EchoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EchoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:example.EchoResponse)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// -------------------------------------------------------------------

class BenchmarkMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.BenchmarkMessage) */ {
 public:
  BenchmarkMessage();
  virtual ~BenchmarkMessage();

  BenchmarkMessage(const BenchmarkMessage& from);

  inline BenchmarkMessage& operator=(const BenchmarkMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BenchmarkMessage& default_instance();

  void Swap(BenchmarkMessage* other);

  // implements Message ----------------------------------------------

  inline BenchmarkMessage* New() const { return New(NULL); }

  BenchmarkMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BenchmarkMessage& from);
  void MergeFrom(const BenchmarkMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BenchmarkMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field1() const;
  void clear_field1();
  static const int kField1FieldNumber = 1;
  const ::std::string& field1() const;
  void set_field1(const ::std::string& value);
  void set_field1(const char* value);
  void set_field1(const char* value, size_t size);
  ::std::string* mutable_field1();
  ::std::string* release_field1();
  void set_allocated_field1(::std::string* field1);

  // optional string field9 = 9 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field9() const;
  void clear_field9();
  static const int kField9FieldNumber = 9;
  const ::std::string& field9() const;
  void set_field9(const ::std::string& value);
  void set_field9(const char* value);
  void set_field9(const char* value, size_t size);
  ::std::string* mutable_field9();
  ::std::string* release_field9();
  void set_allocated_field9(::std::string* field9);

  // optional string field18 = 18 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field18() const;
  void clear_field18();
  static const int kField18FieldNumber = 18;
  const ::std::string& field18() const;
  void set_field18(const ::std::string& value);
  void set_field18(const char* value);
  void set_field18(const char* value, size_t size);
  ::std::string* mutable_field18();
  ::std::string* release_field18();
  void set_allocated_field18(::std::string* field18);

  // optional bool field80 = 80 [default = false];
  bool has_field80() const;
  void clear_field80();
  static const int kField80FieldNumber = 80;
  bool field80() const;
  void set_field80(bool value);

  // optional bool field81 = 81 [default = true];
  bool has_field81() const;
  void clear_field81();
  static const int kField81FieldNumber = 81;
  bool field81() const;
  void set_field81(bool value);

  // optional int32 field2 = 2 [default = 1200003];
  bool has_field2() const;
  void clear_field2();
  static const int kField2FieldNumber = 2;
  ::google::protobuf::int32 field2() const;
  void set_field2(::google::protobuf::int32 value);

  // optional int32 field3 = 3 [default = 1200003];
  bool has_field3() const;
  void clear_field3();
  static const int kField3FieldNumber = 3;
  ::google::protobuf::int32 field3() const;
  void set_field3(::google::protobuf::int32 value);

  // optional int32 field280 = 280 [default = 1200003];
  bool has_field280() const;
  void clear_field280();
  static const int kField280FieldNumber = 280;
  ::google::protobuf::int32 field280() const;
  void set_field280(::google::protobuf::int32 value);

  // optional int32 field6 = 6 [default = 1200003];
  bool has_field6() const;
  void clear_field6();
  static const int kField6FieldNumber = 6;
  ::google::protobuf::int32 field6() const;
  void set_field6(::google::protobuf::int32 value);

  // optional int64 field22 = 22;
  bool has_field22() const;
  void clear_field22();
  static const int kField22FieldNumber = 22;
  ::google::protobuf::int64 field22() const;
  void set_field22(::google::protobuf::int64 value);

  // optional string field4 = 4 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field4() const;
  void clear_field4();
  static const int kField4FieldNumber = 4;
  const ::std::string& field4() const;
  void set_field4(const ::std::string& value);
  void set_field4(const char* value);
  void set_field4(const char* value, size_t size);
  ::std::string* mutable_field4();
  ::std::string* release_field4();
  void set_allocated_field4(::std::string* field4);

  // repeated fixed64 field5 = 5;
  int field5_size() const;
  void clear_field5();
  static const int kField5FieldNumber = 5;
  ::google::protobuf::uint64 field5(int index) const;
  void set_field5(int index, ::google::protobuf::uint64 value);
  void add_field5(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      field5() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_field5();

  // optional bool field59 = 59 [default = false];
  bool has_field59() const;
  void clear_field59();
  static const int kField59FieldNumber = 59;
  bool field59() const;
  void set_field59(bool value);

  // optional string field7 = 7 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field7() const;
  void clear_field7();
  static const int kField7FieldNumber = 7;
  const ::std::string& field7() const;
  void set_field7(const ::std::string& value);
  void set_field7(const char* value);
  void set_field7(const char* value, size_t size);
  ::std::string* mutable_field7();
  ::std::string* release_field7();
  void set_allocated_field7(::std::string* field7);

  // optional int32 field16 = 16 [default = 1200003];
  bool has_field16() const;
  void clear_field16();
  static const int kField16FieldNumber = 16;
  ::google::protobuf::int32 field16() const;
  void set_field16(::google::protobuf::int32 value);

  // optional int32 field130 = 130 [default = 1200003];
  bool has_field130() const;
  void clear_field130();
  static const int kField130FieldNumber = 130;
  ::google::protobuf::int32 field130() const;
  void set_field130(::google::protobuf::int32 value);

  // optional bool field12 = 12 [default = true];
  bool has_field12() const;
  void clear_field12();
  static const int kField12FieldNumber = 12;
  bool field12() const;
  void set_field12(bool value);

  // optional bool field17 = 17 [default = true];
  bool has_field17() const;
  void clear_field17();
  static const int kField17FieldNumber = 17;
  bool field17() const;
  void set_field17(bool value);

  // optional bool field13 = 13 [default = true];
  bool has_field13() const;
  void clear_field13();
  static const int kField13FieldNumber = 13;
  bool field13() const;
  void set_field13(bool value);

  // optional bool field14 = 14 [default = true];
  bool has_field14() const;
  void clear_field14();
  static const int kField14FieldNumber = 14;
  bool field14() const;
  void set_field14(bool value);

  // optional int32 field104 = 104 [default = 1200003];
  bool has_field104() const;
  void clear_field104();
  static const int kField104FieldNumber = 104;
  ::google::protobuf::int32 field104() const;
  void set_field104(::google::protobuf::int32 value);

  // optional int32 field100 = 100 [default = 1200003];
  bool has_field100() const;
  void clear_field100();
  static const int kField100FieldNumber = 100;
  ::google::protobuf::int32 field100() const;
  void set_field100(::google::protobuf::int32 value);

  // optional int32 field101 = 101 [default = 1200003];
  bool has_field101() const;
  void clear_field101();
  static const int kField101FieldNumber = 101;
  ::google::protobuf::int32 field101() const;
  void set_field101(::google::protobuf::int32 value);

  // optional string field102 = 102 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field102() const;
  void clear_field102();
  static const int kField102FieldNumber = 102;
  const ::std::string& field102() const;
  void set_field102(const ::std::string& value);
  void set_field102(const char* value);
  void set_field102(const char* value, size_t size);
  ::std::string* mutable_field102();
  ::std::string* release_field102();
  void set_allocated_field102(::std::string* field102);

  // optional string field103 = 103 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field103() const;
  void clear_field103();
  static const int kField103FieldNumber = 103;
  const ::std::string& field103() const;
  void set_field103(const ::std::string& value);
  void set_field103(const char* value);
  void set_field103(const char* value, size_t size);
  ::std::string* mutable_field103();
  ::std::string* release_field103();
  void set_allocated_field103(::std::string* field103);

  // optional int32 field29 = 29 [default = 1200003];
  bool has_field29() const;
  void clear_field29();
  static const int kField29FieldNumber = 29;
  ::google::protobuf::int32 field29() const;
  void set_field29(::google::protobuf::int32 value);

  // optional bool field30 = 30 [default = false];
  bool has_field30() const;
  void clear_field30();
  static const int kField30FieldNumber = 30;
  bool field30() const;
  void set_field30(bool value);

  // optional int32 field60 = 60 [default = 1200003];
  bool has_field60() const;
  void clear_field60();
  static const int kField60FieldNumber = 60;
  ::google::protobuf::int32 field60() const;
  void set_field60(::google::protobuf::int32 value);

  // optional int32 field271 = 271 [default = 1200003];
  bool has_field271() const;
  void clear_field271();
  static const int kField271FieldNumber = 271;
  ::google::protobuf::int32 field271() const;
  void set_field271(::google::protobuf::int32 value);

  // optional int32 field272 = 272 [default = 1200003];
  bool has_field272() const;
  void clear_field272();
  static const int kField272FieldNumber = 272;
  ::google::protobuf::int32 field272() const;
  void set_field272(::google::protobuf::int32 value);

  // optional int32 field150 = 150 [default = 1200003];
  bool has_field150() const;
  void clear_field150();
  static const int kField150FieldNumber = 150;
  ::google::protobuf::int32 field150() const;
  void set_field150(::google::protobuf::int32 value);

  // optional int32 field23 = 23 [default = 1200003];
  bool has_field23() const;
  void clear_field23();
  static const int kField23FieldNumber = 23;
  ::google::protobuf::int32 field23() const;
  void set_field23(::google::protobuf::int32 value);

  // optional bool field24 = 24 [default = true];
  bool has_field24() const;
  void clear_field24();
  static const int kField24FieldNumber = 24;
  bool field24() const;
  void set_field24(bool value);

  // optional int32 field25 = 25 [default = 1200003];
  bool has_field25() const;
  void clear_field25();
  static const int kField25FieldNumber = 25;
  ::google::protobuf::int32 field25() const;
  void set_field25(::google::protobuf::int32 value);

  // optional bool field78 = 78;
  bool has_field78() const;
  void clear_field78();
  static const int kField78FieldNumber = 78;
  bool field78() const;
  void set_field78(bool value);

  // optional int32 field67 = 67 [default = 1200003];
  bool has_field67() const;
  void clear_field67();
  static const int kField67FieldNumber = 67;
  ::google::protobuf::int32 field67() const;
  void set_field67(::google::protobuf::int32 value);

  // optional int32 field68 = 68 [default = 1200003];
  bool has_field68() const;
  void clear_field68();
  static const int kField68FieldNumber = 68;
  ::google::protobuf::int32 field68() const;
  void set_field68(::google::protobuf::int32 value);

  // optional int32 field128 = 128 [default = 1200003];
  bool has_field128() const;
  void clear_field128();
  static const int kField128FieldNumber = 128;
  ::google::protobuf::int32 field128() const;
  void set_field128(::google::protobuf::int32 value);

  // optional string field129 = 129 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  bool has_field129() const;
  void clear_field129();
  static const int kField129FieldNumber = 129;
  const ::std::string& field129() const;
  void set_field129(const ::std::string& value);
  void set_field129(const char* value);
  void set_field129(const char* value, size_t size);
  ::std::string* mutable_field129();
  ::std::string* release_field129();
  void set_allocated_field129(::std::string* field129);

  // optional int32 field131 = 131 [default = 1200003];
  bool has_field131() const;
  void clear_field131();
  static const int kField131FieldNumber = 131;
  ::google::protobuf::int32 field131() const;
  void set_field131(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:example.BenchmarkMessage)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field9();
  inline void clear_has_field9();
  inline void set_has_field18();
  inline void clear_has_field18();
  inline void set_has_field80();
  inline void clear_has_field80();
  inline void set_has_field81();
  inline void clear_has_field81();
  inline void set_has_field2();
  inline void clear_has_field2();
  inline void set_has_field3();
  inline void clear_has_field3();
  inline void set_has_field280();
  inline void clear_has_field280();
  inline void set_has_field6();
  inline void clear_has_field6();
  inline void set_has_field22();
  inline void clear_has_field22();
  inline void set_has_field4();
  inline void clear_has_field4();
  inline void set_has_field59();
  inline void clear_has_field59();
  inline void set_has_field7();
  inline void clear_has_field7();
  inline void set_has_field16();
  inline void clear_has_field16();
  inline void set_has_field130();
  inline void clear_has_field130();
  inline void set_has_field12();
  inline void clear_has_field12();
  inline void set_has_field17();
  inline void clear_has_field17();
  inline void set_has_field13();
  inline void clear_has_field13();
  inline void set_has_field14();
  inline void clear_has_field14();
  inline void set_has_field104();
  inline void clear_has_field104();
  inline void set_has_field100();
  inline void clear_has_field100();
  inline void set_has_field101();
  inline void clear_has_field101();
  inline void set_has_field102();
  inline void clear_has_field102();
  inline void set_has_field103();
  inline void clear_has_field103();
  inline void set_has_field29();
  inline void clear_has_field29();
  inline void set_has_field30();
  inline void clear_has_field30();
  inline void set_has_field60();
  inline void clear_has_field60();
  inline void set_has_field271();
  inline void clear_has_field271();
  inline void set_has_field272();
  inline void clear_has_field272();
  inline void set_has_field150();
  inline void clear_has_field150();
  inline void set_has_field23();
  inline void clear_has_field23();
  inline void set_has_field24();
  inline void clear_has_field24();
  inline void set_has_field25();
  inline void clear_has_field25();
  inline void set_has_field78();
  inline void clear_has_field78();
  inline void set_has_field67();
  inline void clear_has_field67();
  inline void set_has_field68();
  inline void clear_has_field68();
  inline void set_has_field128();
  inline void clear_has_field128();
  inline void set_has_field129();
  inline void clear_has_field129();
  inline void set_has_field131();
  inline void clear_has_field131();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  static ::std::string* _default_field1_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  static ::std::string* _default_field9_;
  ::google::protobuf::internal::ArenaStringPtr field9_;
  static ::std::string* _default_field18_;
  ::google::protobuf::internal::ArenaStringPtr field18_;
  ::google::protobuf::int32 field2_;
  ::google::protobuf::int32 field3_;
  ::google::protobuf::int32 field280_;
  ::google::protobuf::int32 field6_;
  ::google::protobuf::int64 field22_;
  bool field80_;
  bool field81_;
  bool field59_;
  bool field12_;
  ::google::protobuf::int32 field16_;
  static ::std::string* _default_field4_;
  ::google::protobuf::internal::ArenaStringPtr field4_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > field5_;
  static ::std::string* _default_field7_;
  ::google::protobuf::internal::ArenaStringPtr field7_;
  ::google::protobuf::int32 field130_;
  ::google::protobuf::int32 field104_;
  bool field17_;
  bool field13_;
  bool field14_;
  bool field30_;
  ::google::protobuf::int32 field100_;
  static ::std::string* _default_field102_;
  ::google::protobuf::internal::ArenaStringPtr field102_;
  ::google::protobuf::int32 field101_;
  ::google::protobuf::int32 field29_;
  static ::std::string* _default_field103_;
  ::google::protobuf::internal::ArenaStringPtr field103_;
  ::google::protobuf::int32 field60_;
  ::google::protobuf::int32 field271_;
  ::google::protobuf::int32 field272_;
  ::google::protobuf::int32 field150_;
  ::google::protobuf::int32 field23_;
  ::google::protobuf::int32 field25_;
  bool field24_;
  bool field78_;
  ::google::protobuf::int32 field67_;
  ::google::protobuf::int32 field68_;
  ::google::protobuf::int32 field128_;
  static ::std::string* _default_field129_;
  ::google::protobuf::internal::ArenaStringPtr field129_;
  ::google::protobuf::int32 field131_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static BenchmarkMessage* default_instance_;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::example::EchoRequest* request,
                       ::example::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Greet(::google::protobuf::RpcController* controller,
                       const ::example::BenchmarkMessage* request,
                       ::example::BenchmarkMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::example::EchoRequest* request,
                       ::example::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void Greet(::google::protobuf::RpcController* controller,
                       const ::example::BenchmarkMessage* request,
                       ::example::BenchmarkMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EchoRequest

// optional string message = 1;
inline bool EchoRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:example.EchoRequest.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRequest::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:example.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.EchoRequest.message)
}
inline ::std::string* EchoRequest::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:example.EchoRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:example.EchoRequest.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:example.EchoRequest.message)
}

// -------------------------------------------------------------------

// EchoResponse

// optional string message = 1;
inline bool EchoResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& EchoResponse::message() const {
  // @@protoc_insertion_point(field_get:example.EchoResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:example.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.EchoResponse.message)
}
inline ::std::string* EchoResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:example.EchoResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoResponse::release_message() {
  // @@protoc_insertion_point(field_release:example.EchoResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:example.EchoResponse.message)
}

// -------------------------------------------------------------------

// BenchmarkMessage

// optional string field1 = 1 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BenchmarkMessage::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BenchmarkMessage::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BenchmarkMessage::clear_field1() {
  field1_.ClearToDefaultNoArena(_default_field1_);
  clear_has_field1();
}
inline const ::std::string& BenchmarkMessage::field1() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field1)
  return field1_.GetNoArena(_default_field1_);
}
inline void BenchmarkMessage::set_field1(const ::std::string& value) {
  set_has_field1();
  field1_.SetNoArena(_default_field1_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field1)
}
inline void BenchmarkMessage::set_field1(const char* value) {
  set_has_field1();
  field1_.SetNoArena(_default_field1_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field1)
}
inline void BenchmarkMessage::set_field1(const char* value, size_t size) {
  set_has_field1();
  field1_.SetNoArena(_default_field1_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field1)
}
inline ::std::string* BenchmarkMessage::mutable_field1() {
  set_has_field1();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field1)
  return field1_.MutableNoArena(_default_field1_);
}
inline ::std::string* BenchmarkMessage::release_field1() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field1)
  clear_has_field1();
  return field1_.ReleaseNoArena(_default_field1_);
}
inline void BenchmarkMessage::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    set_has_field1();
  } else {
    clear_has_field1();
  }
  field1_.SetAllocatedNoArena(_default_field1_, field1);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field1)
}

// optional string field9 = 9 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field9() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BenchmarkMessage::set_has_field9() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BenchmarkMessage::clear_has_field9() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BenchmarkMessage::clear_field9() {
  field9_.ClearToDefaultNoArena(_default_field9_);
  clear_has_field9();
}
inline const ::std::string& BenchmarkMessage::field9() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field9)
  return field9_.GetNoArena(_default_field9_);
}
inline void BenchmarkMessage::set_field9(const ::std::string& value) {
  set_has_field9();
  field9_.SetNoArena(_default_field9_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field9)
}
inline void BenchmarkMessage::set_field9(const char* value) {
  set_has_field9();
  field9_.SetNoArena(_default_field9_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field9)
}
inline void BenchmarkMessage::set_field9(const char* value, size_t size) {
  set_has_field9();
  field9_.SetNoArena(_default_field9_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field9)
}
inline ::std::string* BenchmarkMessage::mutable_field9() {
  set_has_field9();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field9)
  return field9_.MutableNoArena(_default_field9_);
}
inline ::std::string* BenchmarkMessage::release_field9() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field9)
  clear_has_field9();
  return field9_.ReleaseNoArena(_default_field9_);
}
inline void BenchmarkMessage::set_allocated_field9(::std::string* field9) {
  if (field9 != NULL) {
    set_has_field9();
  } else {
    clear_has_field9();
  }
  field9_.SetAllocatedNoArena(_default_field9_, field9);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field9)
}

// optional string field18 = 18 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field18() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BenchmarkMessage::set_has_field18() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BenchmarkMessage::clear_has_field18() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BenchmarkMessage::clear_field18() {
  field18_.ClearToDefaultNoArena(_default_field18_);
  clear_has_field18();
}
inline const ::std::string& BenchmarkMessage::field18() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field18)
  return field18_.GetNoArena(_default_field18_);
}
inline void BenchmarkMessage::set_field18(const ::std::string& value) {
  set_has_field18();
  field18_.SetNoArena(_default_field18_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field18)
}
inline void BenchmarkMessage::set_field18(const char* value) {
  set_has_field18();
  field18_.SetNoArena(_default_field18_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field18)
}
inline void BenchmarkMessage::set_field18(const char* value, size_t size) {
  set_has_field18();
  field18_.SetNoArena(_default_field18_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field18)
}
inline ::std::string* BenchmarkMessage::mutable_field18() {
  set_has_field18();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field18)
  return field18_.MutableNoArena(_default_field18_);
}
inline ::std::string* BenchmarkMessage::release_field18() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field18)
  clear_has_field18();
  return field18_.ReleaseNoArena(_default_field18_);
}
inline void BenchmarkMessage::set_allocated_field18(::std::string* field18) {
  if (field18 != NULL) {
    set_has_field18();
  } else {
    clear_has_field18();
  }
  field18_.SetAllocatedNoArena(_default_field18_, field18);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field18)
}

// optional bool field80 = 80 [default = false];
inline bool BenchmarkMessage::has_field80() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BenchmarkMessage::set_has_field80() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BenchmarkMessage::clear_has_field80() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BenchmarkMessage::clear_field80() {
  field80_ = false;
  clear_has_field80();
}
inline bool BenchmarkMessage::field80() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field80)
  return field80_;
}
inline void BenchmarkMessage::set_field80(bool value) {
  set_has_field80();
  field80_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field80)
}

// optional bool field81 = 81 [default = true];
inline bool BenchmarkMessage::has_field81() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BenchmarkMessage::set_has_field81() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BenchmarkMessage::clear_has_field81() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BenchmarkMessage::clear_field81() {
  field81_ = true;
  clear_has_field81();
}
inline bool BenchmarkMessage::field81() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field81)
  return field81_;
}
inline void BenchmarkMessage::set_field81(bool value) {
  set_has_field81();
  field81_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field81)
}

// optional int32 field2 = 2 [default = 1200003];
inline bool BenchmarkMessage::has_field2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BenchmarkMessage::set_has_field2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BenchmarkMessage::clear_has_field2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BenchmarkMessage::clear_field2() {
  field2_ = 1200003;
  clear_has_field2();
}
inline ::google::protobuf::int32 BenchmarkMessage::field2() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field2)
  return field2_;
}
inline void BenchmarkMessage::set_field2(::google::protobuf::int32 value) {
  set_has_field2();
  field2_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field2)
}

// optional int32 field3 = 3 [default = 1200003];
inline bool BenchmarkMessage::has_field3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BenchmarkMessage::set_has_field3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BenchmarkMessage::clear_has_field3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BenchmarkMessage::clear_field3() {
  field3_ = 1200003;
  clear_has_field3();
}
inline ::google::protobuf::int32 BenchmarkMessage::field3() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field3)
  return field3_;
}
inline void BenchmarkMessage::set_field3(::google::protobuf::int32 value) {
  set_has_field3();
  field3_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field3)
}

// optional int32 field280 = 280 [default = 1200003];
inline bool BenchmarkMessage::has_field280() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BenchmarkMessage::set_has_field280() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BenchmarkMessage::clear_has_field280() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BenchmarkMessage::clear_field280() {
  field280_ = 1200003;
  clear_has_field280();
}
inline ::google::protobuf::int32 BenchmarkMessage::field280() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field280)
  return field280_;
}
inline void BenchmarkMessage::set_field280(::google::protobuf::int32 value) {
  set_has_field280();
  field280_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field280)
}

// optional int32 field6 = 6 [default = 1200003];
inline bool BenchmarkMessage::has_field6() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BenchmarkMessage::set_has_field6() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BenchmarkMessage::clear_has_field6() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BenchmarkMessage::clear_field6() {
  field6_ = 1200003;
  clear_has_field6();
}
inline ::google::protobuf::int32 BenchmarkMessage::field6() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field6)
  return field6_;
}
inline void BenchmarkMessage::set_field6(::google::protobuf::int32 value) {
  set_has_field6();
  field6_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field6)
}

// optional int64 field22 = 22;
inline bool BenchmarkMessage::has_field22() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BenchmarkMessage::set_has_field22() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BenchmarkMessage::clear_has_field22() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BenchmarkMessage::clear_field22() {
  field22_ = GOOGLE_LONGLONG(0);
  clear_has_field22();
}
inline ::google::protobuf::int64 BenchmarkMessage::field22() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field22)
  return field22_;
}
inline void BenchmarkMessage::set_field22(::google::protobuf::int64 value) {
  set_has_field22();
  field22_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field22)
}

// optional string field4 = 4 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BenchmarkMessage::set_has_field4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BenchmarkMessage::clear_has_field4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BenchmarkMessage::clear_field4() {
  field4_.ClearToDefaultNoArena(_default_field4_);
  clear_has_field4();
}
inline const ::std::string& BenchmarkMessage::field4() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field4)
  return field4_.GetNoArena(_default_field4_);
}
inline void BenchmarkMessage::set_field4(const ::std::string& value) {
  set_has_field4();
  field4_.SetNoArena(_default_field4_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field4)
}
inline void BenchmarkMessage::set_field4(const char* value) {
  set_has_field4();
  field4_.SetNoArena(_default_field4_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field4)
}
inline void BenchmarkMessage::set_field4(const char* value, size_t size) {
  set_has_field4();
  field4_.SetNoArena(_default_field4_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field4)
}
inline ::std::string* BenchmarkMessage::mutable_field4() {
  set_has_field4();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field4)
  return field4_.MutableNoArena(_default_field4_);
}
inline ::std::string* BenchmarkMessage::release_field4() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field4)
  clear_has_field4();
  return field4_.ReleaseNoArena(_default_field4_);
}
inline void BenchmarkMessage::set_allocated_field4(::std::string* field4) {
  if (field4 != NULL) {
    set_has_field4();
  } else {
    clear_has_field4();
  }
  field4_.SetAllocatedNoArena(_default_field4_, field4);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field4)
}

// repeated fixed64 field5 = 5;
inline int BenchmarkMessage::field5_size() const {
  return field5_.size();
}
inline void BenchmarkMessage::clear_field5() {
  field5_.Clear();
}
inline ::google::protobuf::uint64 BenchmarkMessage::field5(int index) const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field5)
  return field5_.Get(index);
}
inline void BenchmarkMessage::set_field5(int index, ::google::protobuf::uint64 value) {
  field5_.Set(index, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field5)
}
inline void BenchmarkMessage::add_field5(::google::protobuf::uint64 value) {
  field5_.Add(value);
  // @@protoc_insertion_point(field_add:example.BenchmarkMessage.field5)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BenchmarkMessage::field5() const {
  // @@protoc_insertion_point(field_list:example.BenchmarkMessage.field5)
  return field5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BenchmarkMessage::mutable_field5() {
  // @@protoc_insertion_point(field_mutable_list:example.BenchmarkMessage.field5)
  return &field5_;
}

// optional bool field59 = 59 [default = false];
inline bool BenchmarkMessage::has_field59() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BenchmarkMessage::set_has_field59() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BenchmarkMessage::clear_has_field59() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BenchmarkMessage::clear_field59() {
  field59_ = false;
  clear_has_field59();
}
inline bool BenchmarkMessage::field59() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field59)
  return field59_;
}
inline void BenchmarkMessage::set_field59(bool value) {
  set_has_field59();
  field59_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field59)
}

// optional string field7 = 7 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field7() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BenchmarkMessage::set_has_field7() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BenchmarkMessage::clear_has_field7() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BenchmarkMessage::clear_field7() {
  field7_.ClearToDefaultNoArena(_default_field7_);
  clear_has_field7();
}
inline const ::std::string& BenchmarkMessage::field7() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field7)
  return field7_.GetNoArena(_default_field7_);
}
inline void BenchmarkMessage::set_field7(const ::std::string& value) {
  set_has_field7();
  field7_.SetNoArena(_default_field7_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field7)
}
inline void BenchmarkMessage::set_field7(const char* value) {
  set_has_field7();
  field7_.SetNoArena(_default_field7_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field7)
}
inline void BenchmarkMessage::set_field7(const char* value, size_t size) {
  set_has_field7();
  field7_.SetNoArena(_default_field7_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field7)
}
inline ::std::string* BenchmarkMessage::mutable_field7() {
  set_has_field7();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field7)
  return field7_.MutableNoArena(_default_field7_);
}
inline ::std::string* BenchmarkMessage::release_field7() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field7)
  clear_has_field7();
  return field7_.ReleaseNoArena(_default_field7_);
}
inline void BenchmarkMessage::set_allocated_field7(::std::string* field7) {
  if (field7 != NULL) {
    set_has_field7();
  } else {
    clear_has_field7();
  }
  field7_.SetAllocatedNoArena(_default_field7_, field7);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field7)
}

// optional int32 field16 = 16 [default = 1200003];
inline bool BenchmarkMessage::has_field16() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BenchmarkMessage::set_has_field16() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BenchmarkMessage::clear_has_field16() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BenchmarkMessage::clear_field16() {
  field16_ = 1200003;
  clear_has_field16();
}
inline ::google::protobuf::int32 BenchmarkMessage::field16() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field16)
  return field16_;
}
inline void BenchmarkMessage::set_field16(::google::protobuf::int32 value) {
  set_has_field16();
  field16_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field16)
}

// optional int32 field130 = 130 [default = 1200003];
inline bool BenchmarkMessage::has_field130() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BenchmarkMessage::set_has_field130() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BenchmarkMessage::clear_has_field130() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BenchmarkMessage::clear_field130() {
  field130_ = 1200003;
  clear_has_field130();
}
inline ::google::protobuf::int32 BenchmarkMessage::field130() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field130)
  return field130_;
}
inline void BenchmarkMessage::set_field130(::google::protobuf::int32 value) {
  set_has_field130();
  field130_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field130)
}

// optional bool field12 = 12 [default = true];
inline bool BenchmarkMessage::has_field12() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BenchmarkMessage::set_has_field12() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BenchmarkMessage::clear_has_field12() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BenchmarkMessage::clear_field12() {
  field12_ = true;
  clear_has_field12();
}
inline bool BenchmarkMessage::field12() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field12)
  return field12_;
}
inline void BenchmarkMessage::set_field12(bool value) {
  set_has_field12();
  field12_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field12)
}

// optional bool field17 = 17 [default = true];
inline bool BenchmarkMessage::has_field17() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BenchmarkMessage::set_has_field17() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BenchmarkMessage::clear_has_field17() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BenchmarkMessage::clear_field17() {
  field17_ = true;
  clear_has_field17();
}
inline bool BenchmarkMessage::field17() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field17)
  return field17_;
}
inline void BenchmarkMessage::set_field17(bool value) {
  set_has_field17();
  field17_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field17)
}

// optional bool field13 = 13 [default = true];
inline bool BenchmarkMessage::has_field13() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BenchmarkMessage::set_has_field13() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BenchmarkMessage::clear_has_field13() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BenchmarkMessage::clear_field13() {
  field13_ = true;
  clear_has_field13();
}
inline bool BenchmarkMessage::field13() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field13)
  return field13_;
}
inline void BenchmarkMessage::set_field13(bool value) {
  set_has_field13();
  field13_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field13)
}

// optional bool field14 = 14 [default = true];
inline bool BenchmarkMessage::has_field14() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BenchmarkMessage::set_has_field14() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BenchmarkMessage::clear_has_field14() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BenchmarkMessage::clear_field14() {
  field14_ = true;
  clear_has_field14();
}
inline bool BenchmarkMessage::field14() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field14)
  return field14_;
}
inline void BenchmarkMessage::set_field14(bool value) {
  set_has_field14();
  field14_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field14)
}

// optional int32 field104 = 104 [default = 1200003];
inline bool BenchmarkMessage::has_field104() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BenchmarkMessage::set_has_field104() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BenchmarkMessage::clear_has_field104() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BenchmarkMessage::clear_field104() {
  field104_ = 1200003;
  clear_has_field104();
}
inline ::google::protobuf::int32 BenchmarkMessage::field104() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field104)
  return field104_;
}
inline void BenchmarkMessage::set_field104(::google::protobuf::int32 value) {
  set_has_field104();
  field104_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field104)
}

// optional int32 field100 = 100 [default = 1200003];
inline bool BenchmarkMessage::has_field100() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BenchmarkMessage::set_has_field100() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BenchmarkMessage::clear_has_field100() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BenchmarkMessage::clear_field100() {
  field100_ = 1200003;
  clear_has_field100();
}
inline ::google::protobuf::int32 BenchmarkMessage::field100() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field100)
  return field100_;
}
inline void BenchmarkMessage::set_field100(::google::protobuf::int32 value) {
  set_has_field100();
  field100_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field100)
}

// optional int32 field101 = 101 [default = 1200003];
inline bool BenchmarkMessage::has_field101() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BenchmarkMessage::set_has_field101() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BenchmarkMessage::clear_has_field101() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BenchmarkMessage::clear_field101() {
  field101_ = 1200003;
  clear_has_field101();
}
inline ::google::protobuf::int32 BenchmarkMessage::field101() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field101)
  return field101_;
}
inline void BenchmarkMessage::set_field101(::google::protobuf::int32 value) {
  set_has_field101();
  field101_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field101)
}

// optional string field102 = 102 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field102() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BenchmarkMessage::set_has_field102() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BenchmarkMessage::clear_has_field102() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BenchmarkMessage::clear_field102() {
  field102_.ClearToDefaultNoArena(_default_field102_);
  clear_has_field102();
}
inline const ::std::string& BenchmarkMessage::field102() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field102)
  return field102_.GetNoArena(_default_field102_);
}
inline void BenchmarkMessage::set_field102(const ::std::string& value) {
  set_has_field102();
  field102_.SetNoArena(_default_field102_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field102)
}
inline void BenchmarkMessage::set_field102(const char* value) {
  set_has_field102();
  field102_.SetNoArena(_default_field102_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field102)
}
inline void BenchmarkMessage::set_field102(const char* value, size_t size) {
  set_has_field102();
  field102_.SetNoArena(_default_field102_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field102)
}
inline ::std::string* BenchmarkMessage::mutable_field102() {
  set_has_field102();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field102)
  return field102_.MutableNoArena(_default_field102_);
}
inline ::std::string* BenchmarkMessage::release_field102() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field102)
  clear_has_field102();
  return field102_.ReleaseNoArena(_default_field102_);
}
inline void BenchmarkMessage::set_allocated_field102(::std::string* field102) {
  if (field102 != NULL) {
    set_has_field102();
  } else {
    clear_has_field102();
  }
  field102_.SetAllocatedNoArena(_default_field102_, field102);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field102)
}

// optional string field103 = 103 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field103() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BenchmarkMessage::set_has_field103() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BenchmarkMessage::clear_has_field103() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BenchmarkMessage::clear_field103() {
  field103_.ClearToDefaultNoArena(_default_field103_);
  clear_has_field103();
}
inline const ::std::string& BenchmarkMessage::field103() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field103)
  return field103_.GetNoArena(_default_field103_);
}
inline void BenchmarkMessage::set_field103(const ::std::string& value) {
  set_has_field103();
  field103_.SetNoArena(_default_field103_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field103)
}
inline void BenchmarkMessage::set_field103(const char* value) {
  set_has_field103();
  field103_.SetNoArena(_default_field103_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field103)
}
inline void BenchmarkMessage::set_field103(const char* value, size_t size) {
  set_has_field103();
  field103_.SetNoArena(_default_field103_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field103)
}
inline ::std::string* BenchmarkMessage::mutable_field103() {
  set_has_field103();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field103)
  return field103_.MutableNoArena(_default_field103_);
}
inline ::std::string* BenchmarkMessage::release_field103() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field103)
  clear_has_field103();
  return field103_.ReleaseNoArena(_default_field103_);
}
inline void BenchmarkMessage::set_allocated_field103(::std::string* field103) {
  if (field103 != NULL) {
    set_has_field103();
  } else {
    clear_has_field103();
  }
  field103_.SetAllocatedNoArena(_default_field103_, field103);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field103)
}

// optional int32 field29 = 29 [default = 1200003];
inline bool BenchmarkMessage::has_field29() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BenchmarkMessage::set_has_field29() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BenchmarkMessage::clear_has_field29() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BenchmarkMessage::clear_field29() {
  field29_ = 1200003;
  clear_has_field29();
}
inline ::google::protobuf::int32 BenchmarkMessage::field29() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field29)
  return field29_;
}
inline void BenchmarkMessage::set_field29(::google::protobuf::int32 value) {
  set_has_field29();
  field29_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field29)
}

// optional bool field30 = 30 [default = false];
inline bool BenchmarkMessage::has_field30() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BenchmarkMessage::set_has_field30() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BenchmarkMessage::clear_has_field30() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BenchmarkMessage::clear_field30() {
  field30_ = false;
  clear_has_field30();
}
inline bool BenchmarkMessage::field30() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field30)
  return field30_;
}
inline void BenchmarkMessage::set_field30(bool value) {
  set_has_field30();
  field30_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field30)
}

// optional int32 field60 = 60 [default = 1200003];
inline bool BenchmarkMessage::has_field60() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BenchmarkMessage::set_has_field60() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BenchmarkMessage::clear_has_field60() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BenchmarkMessage::clear_field60() {
  field60_ = 1200003;
  clear_has_field60();
}
inline ::google::protobuf::int32 BenchmarkMessage::field60() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field60)
  return field60_;
}
inline void BenchmarkMessage::set_field60(::google::protobuf::int32 value) {
  set_has_field60();
  field60_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field60)
}

// optional int32 field271 = 271 [default = 1200003];
inline bool BenchmarkMessage::has_field271() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BenchmarkMessage::set_has_field271() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BenchmarkMessage::clear_has_field271() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BenchmarkMessage::clear_field271() {
  field271_ = 1200003;
  clear_has_field271();
}
inline ::google::protobuf::int32 BenchmarkMessage::field271() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field271)
  return field271_;
}
inline void BenchmarkMessage::set_field271(::google::protobuf::int32 value) {
  set_has_field271();
  field271_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field271)
}

// optional int32 field272 = 272 [default = 1200003];
inline bool BenchmarkMessage::has_field272() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BenchmarkMessage::set_has_field272() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BenchmarkMessage::clear_has_field272() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BenchmarkMessage::clear_field272() {
  field272_ = 1200003;
  clear_has_field272();
}
inline ::google::protobuf::int32 BenchmarkMessage::field272() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field272)
  return field272_;
}
inline void BenchmarkMessage::set_field272(::google::protobuf::int32 value) {
  set_has_field272();
  field272_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field272)
}

// optional int32 field150 = 150 [default = 1200003];
inline bool BenchmarkMessage::has_field150() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BenchmarkMessage::set_has_field150() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BenchmarkMessage::clear_has_field150() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BenchmarkMessage::clear_field150() {
  field150_ = 1200003;
  clear_has_field150();
}
inline ::google::protobuf::int32 BenchmarkMessage::field150() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field150)
  return field150_;
}
inline void BenchmarkMessage::set_field150(::google::protobuf::int32 value) {
  set_has_field150();
  field150_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field150)
}

// optional int32 field23 = 23 [default = 1200003];
inline bool BenchmarkMessage::has_field23() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BenchmarkMessage::set_has_field23() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BenchmarkMessage::clear_has_field23() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BenchmarkMessage::clear_field23() {
  field23_ = 1200003;
  clear_has_field23();
}
inline ::google::protobuf::int32 BenchmarkMessage::field23() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field23)
  return field23_;
}
inline void BenchmarkMessage::set_field23(::google::protobuf::int32 value) {
  set_has_field23();
  field23_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field23)
}

// optional bool field24 = 24 [default = true];
inline bool BenchmarkMessage::has_field24() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BenchmarkMessage::set_has_field24() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BenchmarkMessage::clear_has_field24() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BenchmarkMessage::clear_field24() {
  field24_ = true;
  clear_has_field24();
}
inline bool BenchmarkMessage::field24() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field24)
  return field24_;
}
inline void BenchmarkMessage::set_field24(bool value) {
  set_has_field24();
  field24_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field24)
}

// optional int32 field25 = 25 [default = 1200003];
inline bool BenchmarkMessage::has_field25() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BenchmarkMessage::set_has_field25() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BenchmarkMessage::clear_has_field25() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BenchmarkMessage::clear_field25() {
  field25_ = 1200003;
  clear_has_field25();
}
inline ::google::protobuf::int32 BenchmarkMessage::field25() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field25)
  return field25_;
}
inline void BenchmarkMessage::set_field25(::google::protobuf::int32 value) {
  set_has_field25();
  field25_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field25)
}

// optional bool field78 = 78;
inline bool BenchmarkMessage::has_field78() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BenchmarkMessage::set_has_field78() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BenchmarkMessage::clear_has_field78() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BenchmarkMessage::clear_field78() {
  field78_ = false;
  clear_has_field78();
}
inline bool BenchmarkMessage::field78() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field78)
  return field78_;
}
inline void BenchmarkMessage::set_field78(bool value) {
  set_has_field78();
  field78_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field78)
}

// optional int32 field67 = 67 [default = 1200003];
inline bool BenchmarkMessage::has_field67() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BenchmarkMessage::set_has_field67() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BenchmarkMessage::clear_has_field67() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BenchmarkMessage::clear_field67() {
  field67_ = 1200003;
  clear_has_field67();
}
inline ::google::protobuf::int32 BenchmarkMessage::field67() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field67)
  return field67_;
}
inline void BenchmarkMessage::set_field67(::google::protobuf::int32 value) {
  set_has_field67();
  field67_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field67)
}

// optional int32 field68 = 68 [default = 1200003];
inline bool BenchmarkMessage::has_field68() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BenchmarkMessage::set_has_field68() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BenchmarkMessage::clear_has_field68() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BenchmarkMessage::clear_field68() {
  field68_ = 1200003;
  clear_has_field68();
}
inline ::google::protobuf::int32 BenchmarkMessage::field68() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field68)
  return field68_;
}
inline void BenchmarkMessage::set_field68(::google::protobuf::int32 value) {
  set_has_field68();
  field68_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field68)
}

// optional int32 field128 = 128 [default = 1200003];
inline bool BenchmarkMessage::has_field128() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BenchmarkMessage::set_has_field128() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BenchmarkMessage::clear_has_field128() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BenchmarkMessage::clear_field128() {
  field128_ = 1200003;
  clear_has_field128();
}
inline ::google::protobuf::int32 BenchmarkMessage::field128() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field128)
  return field128_;
}
inline void BenchmarkMessage::set_field128(::google::protobuf::int32 value) {
  set_has_field128();
  field128_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field128)
}

// optional string field129 = 129 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool BenchmarkMessage::has_field129() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BenchmarkMessage::set_has_field129() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BenchmarkMessage::clear_has_field129() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BenchmarkMessage::clear_field129() {
  field129_.ClearToDefaultNoArena(_default_field129_);
  clear_has_field129();
}
inline const ::std::string& BenchmarkMessage::field129() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field129)
  return field129_.GetNoArena(_default_field129_);
}
inline void BenchmarkMessage::set_field129(const ::std::string& value) {
  set_has_field129();
  field129_.SetNoArena(_default_field129_, value);
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field129)
}
inline void BenchmarkMessage::set_field129(const char* value) {
  set_has_field129();
  field129_.SetNoArena(_default_field129_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.BenchmarkMessage.field129)
}
inline void BenchmarkMessage::set_field129(const char* value, size_t size) {
  set_has_field129();
  field129_.SetNoArena(_default_field129_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.BenchmarkMessage.field129)
}
inline ::std::string* BenchmarkMessage::mutable_field129() {
  set_has_field129();
  // @@protoc_insertion_point(field_mutable:example.BenchmarkMessage.field129)
  return field129_.MutableNoArena(_default_field129_);
}
inline ::std::string* BenchmarkMessage::release_field129() {
  // @@protoc_insertion_point(field_release:example.BenchmarkMessage.field129)
  clear_has_field129();
  return field129_.ReleaseNoArena(_default_field129_);
}
inline void BenchmarkMessage::set_allocated_field129(::std::string* field129) {
  if (field129 != NULL) {
    set_has_field129();
  } else {
    clear_has_field129();
  }
  field129_.SetAllocatedNoArena(_default_field129_, field129);
  // @@protoc_insertion_point(field_set_allocated:example.BenchmarkMessage.field129)
}

// optional int32 field131 = 131 [default = 1200003];
inline bool BenchmarkMessage::has_field131() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BenchmarkMessage::set_has_field131() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BenchmarkMessage::clear_has_field131() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BenchmarkMessage::clear_field131() {
  field131_ = 1200003;
  clear_has_field131();
}
inline ::google::protobuf::int32 BenchmarkMessage::field131() const {
  // @@protoc_insertion_point(field_get:example.BenchmarkMessage.field131)
  return field131_;
}
inline void BenchmarkMessage::set_field131(::google::protobuf::int32 value) {
  set_has_field131();
  field131_ = value;
  // @@protoc_insertion_point(field_set:example.BenchmarkMessage.field131)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
