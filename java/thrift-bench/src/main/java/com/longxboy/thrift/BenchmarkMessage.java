/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longxboy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BenchmarkMessage implements org.apache.thrift.TBase<BenchmarkMessage, BenchmarkMessage._Fields>, java.io.Serializable, Cloneable, Comparable<BenchmarkMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BenchmarkMessage");

  private static final org.apache.thrift.protocol.TField FIELD1_FIELD_DESC = new org.apache.thrift.protocol.TField("field1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD2_FIELD_DESC = new org.apache.thrift.protocol.TField("field2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD3_FIELD_DESC = new org.apache.thrift.protocol.TField("field3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD4_FIELD_DESC = new org.apache.thrift.protocol.TField("field4", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD5_FIELD_DESC = new org.apache.thrift.protocol.TField("field5", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FIELD6_FIELD_DESC = new org.apache.thrift.protocol.TField("field6", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FIELD7_FIELD_DESC = new org.apache.thrift.protocol.TField("field7", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FIELD9_FIELD_DESC = new org.apache.thrift.protocol.TField("field9", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FIELD12_FIELD_DESC = new org.apache.thrift.protocol.TField("field12", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField FIELD13_FIELD_DESC = new org.apache.thrift.protocol.TField("field13", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField FIELD14_FIELD_DESC = new org.apache.thrift.protocol.TField("field14", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField FIELD16_FIELD_DESC = new org.apache.thrift.protocol.TField("field16", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField FIELD17_FIELD_DESC = new org.apache.thrift.protocol.TField("field17", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField FIELD18_FIELD_DESC = new org.apache.thrift.protocol.TField("field18", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FIELD22_FIELD_DESC = new org.apache.thrift.protocol.TField("field22", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField FIELD23_FIELD_DESC = new org.apache.thrift.protocol.TField("field23", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField FIELD24_FIELD_DESC = new org.apache.thrift.protocol.TField("field24", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField FIELD25_FIELD_DESC = new org.apache.thrift.protocol.TField("field25", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField FIELD29_FIELD_DESC = new org.apache.thrift.protocol.TField("field29", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField FIELD30_FIELD_DESC = new org.apache.thrift.protocol.TField("field30", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField FIELD59_FIELD_DESC = new org.apache.thrift.protocol.TField("field59", org.apache.thrift.protocol.TType.BOOL, (short)59);
  private static final org.apache.thrift.protocol.TField FIELD60_FIELD_DESC = new org.apache.thrift.protocol.TField("field60", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField FIELD67_FIELD_DESC = new org.apache.thrift.protocol.TField("field67", org.apache.thrift.protocol.TType.I32, (short)67);
  private static final org.apache.thrift.protocol.TField FIELD68_FIELD_DESC = new org.apache.thrift.protocol.TField("field68", org.apache.thrift.protocol.TType.I32, (short)68);
  private static final org.apache.thrift.protocol.TField FIELD78_FIELD_DESC = new org.apache.thrift.protocol.TField("field78", org.apache.thrift.protocol.TType.BOOL, (short)78);
  private static final org.apache.thrift.protocol.TField FIELD80_FIELD_DESC = new org.apache.thrift.protocol.TField("field80", org.apache.thrift.protocol.TType.BOOL, (short)80);
  private static final org.apache.thrift.protocol.TField FIELD81_FIELD_DESC = new org.apache.thrift.protocol.TField("field81", org.apache.thrift.protocol.TType.BOOL, (short)81);
  private static final org.apache.thrift.protocol.TField FIELD100_FIELD_DESC = new org.apache.thrift.protocol.TField("field100", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField FIELD101_FIELD_DESC = new org.apache.thrift.protocol.TField("field101", org.apache.thrift.protocol.TType.I32, (short)101);
  private static final org.apache.thrift.protocol.TField FIELD102_FIELD_DESC = new org.apache.thrift.protocol.TField("field102", org.apache.thrift.protocol.TType.STRING, (short)102);
  private static final org.apache.thrift.protocol.TField FIELD103_FIELD_DESC = new org.apache.thrift.protocol.TField("field103", org.apache.thrift.protocol.TType.STRING, (short)103);
  private static final org.apache.thrift.protocol.TField FIELD104_FIELD_DESC = new org.apache.thrift.protocol.TField("field104", org.apache.thrift.protocol.TType.I32, (short)104);
  private static final org.apache.thrift.protocol.TField FIELD128_FIELD_DESC = new org.apache.thrift.protocol.TField("field128", org.apache.thrift.protocol.TType.I32, (short)128);
  private static final org.apache.thrift.protocol.TField FIELD129_FIELD_DESC = new org.apache.thrift.protocol.TField("field129", org.apache.thrift.protocol.TType.STRING, (short)129);
  private static final org.apache.thrift.protocol.TField FIELD130_FIELD_DESC = new org.apache.thrift.protocol.TField("field130", org.apache.thrift.protocol.TType.I32, (short)130);
  private static final org.apache.thrift.protocol.TField FIELD131_FIELD_DESC = new org.apache.thrift.protocol.TField("field131", org.apache.thrift.protocol.TType.I32, (short)131);
  private static final org.apache.thrift.protocol.TField FIELD150_FIELD_DESC = new org.apache.thrift.protocol.TField("field150", org.apache.thrift.protocol.TType.I32, (short)150);
  private static final org.apache.thrift.protocol.TField FIELD271_FIELD_DESC = new org.apache.thrift.protocol.TField("field271", org.apache.thrift.protocol.TType.I32, (short)271);
  private static final org.apache.thrift.protocol.TField FIELD272_FIELD_DESC = new org.apache.thrift.protocol.TField("field272", org.apache.thrift.protocol.TType.I32, (short)272);
  private static final org.apache.thrift.protocol.TField FIELD280_FIELD_DESC = new org.apache.thrift.protocol.TField("field280", org.apache.thrift.protocol.TType.I32, (short)280);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BenchmarkMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BenchmarkMessageTupleSchemeFactory());
  }

  public String field1; // required
  public int field2; // required
  public int field3; // required
  public String field4; // required
  public long field5; // required
  public int field6; // required
  public String field7; // required
  public String field9; // required
  public boolean field12; // required
  public boolean field13; // required
  public boolean field14; // required
  public int field16; // required
  public boolean field17; // required
  public String field18; // required
  public long field22; // required
  public int field23; // required
  public boolean field24; // required
  public int field25; // required
  public int field29; // required
  public boolean field30; // required
  public boolean field59; // required
  public int field60; // required
  public int field67; // required
  public int field68; // required
  public boolean field78; // required
  public boolean field80; // required
  public boolean field81; // required
  public int field100; // required
  public int field101; // required
  public String field102; // required
  public String field103; // required
  public int field104; // required
  public int field128; // required
  public String field129; // required
  public int field130; // required
  public int field131; // required
  public int field150; // required
  public int field271; // required
  public int field272; // required
  public int field280; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD1((short)1, "field1"),
    FIELD2((short)2, "field2"),
    FIELD3((short)3, "field3"),
    FIELD4((short)4, "field4"),
    FIELD5((short)5, "field5"),
    FIELD6((short)6, "field6"),
    FIELD7((short)7, "field7"),
    FIELD9((short)9, "field9"),
    FIELD12((short)12, "field12"),
    FIELD13((short)13, "field13"),
    FIELD14((short)14, "field14"),
    FIELD16((short)16, "field16"),
    FIELD17((short)17, "field17"),
    FIELD18((short)18, "field18"),
    FIELD22((short)22, "field22"),
    FIELD23((short)23, "field23"),
    FIELD24((short)24, "field24"),
    FIELD25((short)25, "field25"),
    FIELD29((short)29, "field29"),
    FIELD30((short)30, "field30"),
    FIELD59((short)59, "field59"),
    FIELD60((short)60, "field60"),
    FIELD67((short)67, "field67"),
    FIELD68((short)68, "field68"),
    FIELD78((short)78, "field78"),
    FIELD80((short)80, "field80"),
    FIELD81((short)81, "field81"),
    FIELD100((short)100, "field100"),
    FIELD101((short)101, "field101"),
    FIELD102((short)102, "field102"),
    FIELD103((short)103, "field103"),
    FIELD104((short)104, "field104"),
    FIELD128((short)128, "field128"),
    FIELD129((short)129, "field129"),
    FIELD130((short)130, "field130"),
    FIELD131((short)131, "field131"),
    FIELD150((short)150, "field150"),
    FIELD271((short)271, "field271"),
    FIELD272((short)272, "field272"),
    FIELD280((short)280, "field280");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD1
          return FIELD1;
        case 2: // FIELD2
          return FIELD2;
        case 3: // FIELD3
          return FIELD3;
        case 4: // FIELD4
          return FIELD4;
        case 5: // FIELD5
          return FIELD5;
        case 6: // FIELD6
          return FIELD6;
        case 7: // FIELD7
          return FIELD7;
        case 9: // FIELD9
          return FIELD9;
        case 12: // FIELD12
          return FIELD12;
        case 13: // FIELD13
          return FIELD13;
        case 14: // FIELD14
          return FIELD14;
        case 16: // FIELD16
          return FIELD16;
        case 17: // FIELD17
          return FIELD17;
        case 18: // FIELD18
          return FIELD18;
        case 22: // FIELD22
          return FIELD22;
        case 23: // FIELD23
          return FIELD23;
        case 24: // FIELD24
          return FIELD24;
        case 25: // FIELD25
          return FIELD25;
        case 29: // FIELD29
          return FIELD29;
        case 30: // FIELD30
          return FIELD30;
        case 59: // FIELD59
          return FIELD59;
        case 60: // FIELD60
          return FIELD60;
        case 67: // FIELD67
          return FIELD67;
        case 68: // FIELD68
          return FIELD68;
        case 78: // FIELD78
          return FIELD78;
        case 80: // FIELD80
          return FIELD80;
        case 81: // FIELD81
          return FIELD81;
        case 100: // FIELD100
          return FIELD100;
        case 101: // FIELD101
          return FIELD101;
        case 102: // FIELD102
          return FIELD102;
        case 103: // FIELD103
          return FIELD103;
        case 104: // FIELD104
          return FIELD104;
        case 128: // FIELD128
          return FIELD128;
        case 129: // FIELD129
          return FIELD129;
        case 130: // FIELD130
          return FIELD130;
        case 131: // FIELD131
          return FIELD131;
        case 150: // FIELD150
          return FIELD150;
        case 271: // FIELD271
          return FIELD271;
        case 272: // FIELD272
          return FIELD272;
        case 280: // FIELD280
          return FIELD280;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELD2_ISSET_ID = 0;
  private static final int __FIELD3_ISSET_ID = 1;
  private static final int __FIELD5_ISSET_ID = 2;
  private static final int __FIELD6_ISSET_ID = 3;
  private static final int __FIELD12_ISSET_ID = 4;
  private static final int __FIELD13_ISSET_ID = 5;
  private static final int __FIELD14_ISSET_ID = 6;
  private static final int __FIELD16_ISSET_ID = 7;
  private static final int __FIELD17_ISSET_ID = 8;
  private static final int __FIELD22_ISSET_ID = 9;
  private static final int __FIELD23_ISSET_ID = 10;
  private static final int __FIELD24_ISSET_ID = 11;
  private static final int __FIELD25_ISSET_ID = 12;
  private static final int __FIELD29_ISSET_ID = 13;
  private static final int __FIELD30_ISSET_ID = 14;
  private static final int __FIELD59_ISSET_ID = 15;
  private static final int __FIELD60_ISSET_ID = 16;
  private static final int __FIELD67_ISSET_ID = 17;
  private static final int __FIELD68_ISSET_ID = 18;
  private static final int __FIELD78_ISSET_ID = 19;
  private static final int __FIELD80_ISSET_ID = 20;
  private static final int __FIELD81_ISSET_ID = 21;
  private static final int __FIELD100_ISSET_ID = 22;
  private static final int __FIELD101_ISSET_ID = 23;
  private static final int __FIELD104_ISSET_ID = 24;
  private static final int __FIELD128_ISSET_ID = 25;
  private static final int __FIELD130_ISSET_ID = 26;
  private static final int __FIELD131_ISSET_ID = 27;
  private static final int __FIELD150_ISSET_ID = 28;
  private static final int __FIELD271_ISSET_ID = 29;
  private static final int __FIELD272_ISSET_ID = 30;
  private static final int __FIELD280_ISSET_ID = 31;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD1, new org.apache.thrift.meta_data.FieldMetaData("field1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD2, new org.apache.thrift.meta_data.FieldMetaData("field2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD3, new org.apache.thrift.meta_data.FieldMetaData("field3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD4, new org.apache.thrift.meta_data.FieldMetaData("field4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD5, new org.apache.thrift.meta_data.FieldMetaData("field5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIELD6, new org.apache.thrift.meta_data.FieldMetaData("field6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD7, new org.apache.thrift.meta_data.FieldMetaData("field7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD9, new org.apache.thrift.meta_data.FieldMetaData("field9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD12, new org.apache.thrift.meta_data.FieldMetaData("field12", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD13, new org.apache.thrift.meta_data.FieldMetaData("field13", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD14, new org.apache.thrift.meta_data.FieldMetaData("field14", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD16, new org.apache.thrift.meta_data.FieldMetaData("field16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD17, new org.apache.thrift.meta_data.FieldMetaData("field17", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD18, new org.apache.thrift.meta_data.FieldMetaData("field18", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD22, new org.apache.thrift.meta_data.FieldMetaData("field22", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIELD23, new org.apache.thrift.meta_data.FieldMetaData("field23", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD24, new org.apache.thrift.meta_data.FieldMetaData("field24", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD25, new org.apache.thrift.meta_data.FieldMetaData("field25", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD29, new org.apache.thrift.meta_data.FieldMetaData("field29", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD30, new org.apache.thrift.meta_data.FieldMetaData("field30", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD59, new org.apache.thrift.meta_data.FieldMetaData("field59", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD60, new org.apache.thrift.meta_data.FieldMetaData("field60", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD67, new org.apache.thrift.meta_data.FieldMetaData("field67", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD68, new org.apache.thrift.meta_data.FieldMetaData("field68", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD78, new org.apache.thrift.meta_data.FieldMetaData("field78", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD80, new org.apache.thrift.meta_data.FieldMetaData("field80", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD81, new org.apache.thrift.meta_data.FieldMetaData("field81", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD100, new org.apache.thrift.meta_data.FieldMetaData("field100", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD101, new org.apache.thrift.meta_data.FieldMetaData("field101", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD102, new org.apache.thrift.meta_data.FieldMetaData("field102", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD103, new org.apache.thrift.meta_data.FieldMetaData("field103", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD104, new org.apache.thrift.meta_data.FieldMetaData("field104", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD128, new org.apache.thrift.meta_data.FieldMetaData("field128", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD129, new org.apache.thrift.meta_data.FieldMetaData("field129", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD130, new org.apache.thrift.meta_data.FieldMetaData("field130", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD131, new org.apache.thrift.meta_data.FieldMetaData("field131", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD150, new org.apache.thrift.meta_data.FieldMetaData("field150", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD271, new org.apache.thrift.meta_data.FieldMetaData("field271", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD272, new org.apache.thrift.meta_data.FieldMetaData("field272", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD280, new org.apache.thrift.meta_data.FieldMetaData("field280", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BenchmarkMessage.class, metaDataMap);
  }

  public BenchmarkMessage() {
  }

  public BenchmarkMessage(
    String field1,
    int field2,
    int field3,
    String field4,
    long field5,
    int field6,
    String field7,
    String field9,
    boolean field12,
    boolean field13,
    boolean field14,
    int field16,
    boolean field17,
    String field18,
    long field22,
    int field23,
    boolean field24,
    int field25,
    int field29,
    boolean field30,
    boolean field59,
    int field60,
    int field67,
    int field68,
    boolean field78,
    boolean field80,
    boolean field81,
    int field100,
    int field101,
    String field102,
    String field103,
    int field104,
    int field128,
    String field129,
    int field130,
    int field131,
    int field150,
    int field271,
    int field272,
    int field280)
  {
    this();
    this.field1 = field1;
    this.field2 = field2;
    setField2IsSet(true);
    this.field3 = field3;
    setField3IsSet(true);
    this.field4 = field4;
    this.field5 = field5;
    setField5IsSet(true);
    this.field6 = field6;
    setField6IsSet(true);
    this.field7 = field7;
    this.field9 = field9;
    this.field12 = field12;
    setField12IsSet(true);
    this.field13 = field13;
    setField13IsSet(true);
    this.field14 = field14;
    setField14IsSet(true);
    this.field16 = field16;
    setField16IsSet(true);
    this.field17 = field17;
    setField17IsSet(true);
    this.field18 = field18;
    this.field22 = field22;
    setField22IsSet(true);
    this.field23 = field23;
    setField23IsSet(true);
    this.field24 = field24;
    setField24IsSet(true);
    this.field25 = field25;
    setField25IsSet(true);
    this.field29 = field29;
    setField29IsSet(true);
    this.field30 = field30;
    setField30IsSet(true);
    this.field59 = field59;
    setField59IsSet(true);
    this.field60 = field60;
    setField60IsSet(true);
    this.field67 = field67;
    setField67IsSet(true);
    this.field68 = field68;
    setField68IsSet(true);
    this.field78 = field78;
    setField78IsSet(true);
    this.field80 = field80;
    setField80IsSet(true);
    this.field81 = field81;
    setField81IsSet(true);
    this.field100 = field100;
    setField100IsSet(true);
    this.field101 = field101;
    setField101IsSet(true);
    this.field102 = field102;
    this.field103 = field103;
    this.field104 = field104;
    setField104IsSet(true);
    this.field128 = field128;
    setField128IsSet(true);
    this.field129 = field129;
    this.field130 = field130;
    setField130IsSet(true);
    this.field131 = field131;
    setField131IsSet(true);
    this.field150 = field150;
    setField150IsSet(true);
    this.field271 = field271;
    setField271IsSet(true);
    this.field272 = field272;
    setField272IsSet(true);
    this.field280 = field280;
    setField280IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BenchmarkMessage(BenchmarkMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetField1()) {
      this.field1 = other.field1;
    }
    this.field2 = other.field2;
    this.field3 = other.field3;
    if (other.isSetField4()) {
      this.field4 = other.field4;
    }
    this.field5 = other.field5;
    this.field6 = other.field6;
    if (other.isSetField7()) {
      this.field7 = other.field7;
    }
    if (other.isSetField9()) {
      this.field9 = other.field9;
    }
    this.field12 = other.field12;
    this.field13 = other.field13;
    this.field14 = other.field14;
    this.field16 = other.field16;
    this.field17 = other.field17;
    if (other.isSetField18()) {
      this.field18 = other.field18;
    }
    this.field22 = other.field22;
    this.field23 = other.field23;
    this.field24 = other.field24;
    this.field25 = other.field25;
    this.field29 = other.field29;
    this.field30 = other.field30;
    this.field59 = other.field59;
    this.field60 = other.field60;
    this.field67 = other.field67;
    this.field68 = other.field68;
    this.field78 = other.field78;
    this.field80 = other.field80;
    this.field81 = other.field81;
    this.field100 = other.field100;
    this.field101 = other.field101;
    if (other.isSetField102()) {
      this.field102 = other.field102;
    }
    if (other.isSetField103()) {
      this.field103 = other.field103;
    }
    this.field104 = other.field104;
    this.field128 = other.field128;
    if (other.isSetField129()) {
      this.field129 = other.field129;
    }
    this.field130 = other.field130;
    this.field131 = other.field131;
    this.field150 = other.field150;
    this.field271 = other.field271;
    this.field272 = other.field272;
    this.field280 = other.field280;
  }

  public BenchmarkMessage deepCopy() {
    return new BenchmarkMessage(this);
  }

  @Override
  public void clear() {
    this.field1 = null;
    setField2IsSet(false);
    this.field2 = 0;
    setField3IsSet(false);
    this.field3 = 0;
    this.field4 = null;
    setField5IsSet(false);
    this.field5 = 0;
    setField6IsSet(false);
    this.field6 = 0;
    this.field7 = null;
    this.field9 = null;
    setField12IsSet(false);
    this.field12 = false;
    setField13IsSet(false);
    this.field13 = false;
    setField14IsSet(false);
    this.field14 = false;
    setField16IsSet(false);
    this.field16 = 0;
    setField17IsSet(false);
    this.field17 = false;
    this.field18 = null;
    setField22IsSet(false);
    this.field22 = 0;
    setField23IsSet(false);
    this.field23 = 0;
    setField24IsSet(false);
    this.field24 = false;
    setField25IsSet(false);
    this.field25 = 0;
    setField29IsSet(false);
    this.field29 = 0;
    setField30IsSet(false);
    this.field30 = false;
    setField59IsSet(false);
    this.field59 = false;
    setField60IsSet(false);
    this.field60 = 0;
    setField67IsSet(false);
    this.field67 = 0;
    setField68IsSet(false);
    this.field68 = 0;
    setField78IsSet(false);
    this.field78 = false;
    setField80IsSet(false);
    this.field80 = false;
    setField81IsSet(false);
    this.field81 = false;
    setField100IsSet(false);
    this.field100 = 0;
    setField101IsSet(false);
    this.field101 = 0;
    this.field102 = null;
    this.field103 = null;
    setField104IsSet(false);
    this.field104 = 0;
    setField128IsSet(false);
    this.field128 = 0;
    this.field129 = null;
    setField130IsSet(false);
    this.field130 = 0;
    setField131IsSet(false);
    this.field131 = 0;
    setField150IsSet(false);
    this.field150 = 0;
    setField271IsSet(false);
    this.field271 = 0;
    setField272IsSet(false);
    this.field272 = 0;
    setField280IsSet(false);
    this.field280 = 0;
  }

  public String getField1() {
    return this.field1;
  }

  public BenchmarkMessage setField1(String field1) {
    this.field1 = field1;
    return this;
  }

  public void unsetField1() {
    this.field1 = null;
  }

  /** Returns true if field field1 is set (has been assigned a value) and false otherwise */
  public boolean isSetField1() {
    return this.field1 != null;
  }

  public void setField1IsSet(boolean value) {
    if (!value) {
      this.field1 = null;
    }
  }

  public int getField2() {
    return this.field2;
  }

  public BenchmarkMessage setField2(int field2) {
    this.field2 = field2;
    setField2IsSet(true);
    return this;
  }

  public void unsetField2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD2_ISSET_ID);
  }

  /** Returns true if field field2 is set (has been assigned a value) and false otherwise */
  public boolean isSetField2() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD2_ISSET_ID);
  }

  public void setField2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD2_ISSET_ID, value);
  }

  public int getField3() {
    return this.field3;
  }

  public BenchmarkMessage setField3(int field3) {
    this.field3 = field3;
    setField3IsSet(true);
    return this;
  }

  public void unsetField3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD3_ISSET_ID);
  }

  /** Returns true if field field3 is set (has been assigned a value) and false otherwise */
  public boolean isSetField3() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD3_ISSET_ID);
  }

  public void setField3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD3_ISSET_ID, value);
  }

  public String getField4() {
    return this.field4;
  }

  public BenchmarkMessage setField4(String field4) {
    this.field4 = field4;
    return this;
  }

  public void unsetField4() {
    this.field4 = null;
  }

  /** Returns true if field field4 is set (has been assigned a value) and false otherwise */
  public boolean isSetField4() {
    return this.field4 != null;
  }

  public void setField4IsSet(boolean value) {
    if (!value) {
      this.field4 = null;
    }
  }

  public long getField5() {
    return this.field5;
  }

  public BenchmarkMessage setField5(long field5) {
    this.field5 = field5;
    setField5IsSet(true);
    return this;
  }

  public void unsetField5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD5_ISSET_ID);
  }

  /** Returns true if field field5 is set (has been assigned a value) and false otherwise */
  public boolean isSetField5() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD5_ISSET_ID);
  }

  public void setField5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD5_ISSET_ID, value);
  }

  public int getField6() {
    return this.field6;
  }

  public BenchmarkMessage setField6(int field6) {
    this.field6 = field6;
    setField6IsSet(true);
    return this;
  }

  public void unsetField6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD6_ISSET_ID);
  }

  /** Returns true if field field6 is set (has been assigned a value) and false otherwise */
  public boolean isSetField6() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD6_ISSET_ID);
  }

  public void setField6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD6_ISSET_ID, value);
  }

  public String getField7() {
    return this.field7;
  }

  public BenchmarkMessage setField7(String field7) {
    this.field7 = field7;
    return this;
  }

  public void unsetField7() {
    this.field7 = null;
  }

  /** Returns true if field field7 is set (has been assigned a value) and false otherwise */
  public boolean isSetField7() {
    return this.field7 != null;
  }

  public void setField7IsSet(boolean value) {
    if (!value) {
      this.field7 = null;
    }
  }

  public String getField9() {
    return this.field9;
  }

  public BenchmarkMessage setField9(String field9) {
    this.field9 = field9;
    return this;
  }

  public void unsetField9() {
    this.field9 = null;
  }

  /** Returns true if field field9 is set (has been assigned a value) and false otherwise */
  public boolean isSetField9() {
    return this.field9 != null;
  }

  public void setField9IsSet(boolean value) {
    if (!value) {
      this.field9 = null;
    }
  }

  public boolean isField12() {
    return this.field12;
  }

  public BenchmarkMessage setField12(boolean field12) {
    this.field12 = field12;
    setField12IsSet(true);
    return this;
  }

  public void unsetField12() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD12_ISSET_ID);
  }

  /** Returns true if field field12 is set (has been assigned a value) and false otherwise */
  public boolean isSetField12() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD12_ISSET_ID);
  }

  public void setField12IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD12_ISSET_ID, value);
  }

  public boolean isField13() {
    return this.field13;
  }

  public BenchmarkMessage setField13(boolean field13) {
    this.field13 = field13;
    setField13IsSet(true);
    return this;
  }

  public void unsetField13() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD13_ISSET_ID);
  }

  /** Returns true if field field13 is set (has been assigned a value) and false otherwise */
  public boolean isSetField13() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD13_ISSET_ID);
  }

  public void setField13IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD13_ISSET_ID, value);
  }

  public boolean isField14() {
    return this.field14;
  }

  public BenchmarkMessage setField14(boolean field14) {
    this.field14 = field14;
    setField14IsSet(true);
    return this;
  }

  public void unsetField14() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD14_ISSET_ID);
  }

  /** Returns true if field field14 is set (has been assigned a value) and false otherwise */
  public boolean isSetField14() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD14_ISSET_ID);
  }

  public void setField14IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD14_ISSET_ID, value);
  }

  public int getField16() {
    return this.field16;
  }

  public BenchmarkMessage setField16(int field16) {
    this.field16 = field16;
    setField16IsSet(true);
    return this;
  }

  public void unsetField16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD16_ISSET_ID);
  }

  /** Returns true if field field16 is set (has been assigned a value) and false otherwise */
  public boolean isSetField16() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD16_ISSET_ID);
  }

  public void setField16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD16_ISSET_ID, value);
  }

  public boolean isField17() {
    return this.field17;
  }

  public BenchmarkMessage setField17(boolean field17) {
    this.field17 = field17;
    setField17IsSet(true);
    return this;
  }

  public void unsetField17() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD17_ISSET_ID);
  }

  /** Returns true if field field17 is set (has been assigned a value) and false otherwise */
  public boolean isSetField17() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD17_ISSET_ID);
  }

  public void setField17IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD17_ISSET_ID, value);
  }

  public String getField18() {
    return this.field18;
  }

  public BenchmarkMessage setField18(String field18) {
    this.field18 = field18;
    return this;
  }

  public void unsetField18() {
    this.field18 = null;
  }

  /** Returns true if field field18 is set (has been assigned a value) and false otherwise */
  public boolean isSetField18() {
    return this.field18 != null;
  }

  public void setField18IsSet(boolean value) {
    if (!value) {
      this.field18 = null;
    }
  }

  public long getField22() {
    return this.field22;
  }

  public BenchmarkMessage setField22(long field22) {
    this.field22 = field22;
    setField22IsSet(true);
    return this;
  }

  public void unsetField22() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD22_ISSET_ID);
  }

  /** Returns true if field field22 is set (has been assigned a value) and false otherwise */
  public boolean isSetField22() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD22_ISSET_ID);
  }

  public void setField22IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD22_ISSET_ID, value);
  }

  public int getField23() {
    return this.field23;
  }

  public BenchmarkMessage setField23(int field23) {
    this.field23 = field23;
    setField23IsSet(true);
    return this;
  }

  public void unsetField23() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD23_ISSET_ID);
  }

  /** Returns true if field field23 is set (has been assigned a value) and false otherwise */
  public boolean isSetField23() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD23_ISSET_ID);
  }

  public void setField23IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD23_ISSET_ID, value);
  }

  public boolean isField24() {
    return this.field24;
  }

  public BenchmarkMessage setField24(boolean field24) {
    this.field24 = field24;
    setField24IsSet(true);
    return this;
  }

  public void unsetField24() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD24_ISSET_ID);
  }

  /** Returns true if field field24 is set (has been assigned a value) and false otherwise */
  public boolean isSetField24() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD24_ISSET_ID);
  }

  public void setField24IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD24_ISSET_ID, value);
  }

  public int getField25() {
    return this.field25;
  }

  public BenchmarkMessage setField25(int field25) {
    this.field25 = field25;
    setField25IsSet(true);
    return this;
  }

  public void unsetField25() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD25_ISSET_ID);
  }

  /** Returns true if field field25 is set (has been assigned a value) and false otherwise */
  public boolean isSetField25() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD25_ISSET_ID);
  }

  public void setField25IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD25_ISSET_ID, value);
  }

  public int getField29() {
    return this.field29;
  }

  public BenchmarkMessage setField29(int field29) {
    this.field29 = field29;
    setField29IsSet(true);
    return this;
  }

  public void unsetField29() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD29_ISSET_ID);
  }

  /** Returns true if field field29 is set (has been assigned a value) and false otherwise */
  public boolean isSetField29() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD29_ISSET_ID);
  }

  public void setField29IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD29_ISSET_ID, value);
  }

  public boolean isField30() {
    return this.field30;
  }

  public BenchmarkMessage setField30(boolean field30) {
    this.field30 = field30;
    setField30IsSet(true);
    return this;
  }

  public void unsetField30() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD30_ISSET_ID);
  }

  /** Returns true if field field30 is set (has been assigned a value) and false otherwise */
  public boolean isSetField30() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD30_ISSET_ID);
  }

  public void setField30IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD30_ISSET_ID, value);
  }

  public boolean isField59() {
    return this.field59;
  }

  public BenchmarkMessage setField59(boolean field59) {
    this.field59 = field59;
    setField59IsSet(true);
    return this;
  }

  public void unsetField59() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD59_ISSET_ID);
  }

  /** Returns true if field field59 is set (has been assigned a value) and false otherwise */
  public boolean isSetField59() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD59_ISSET_ID);
  }

  public void setField59IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD59_ISSET_ID, value);
  }

  public int getField60() {
    return this.field60;
  }

  public BenchmarkMessage setField60(int field60) {
    this.field60 = field60;
    setField60IsSet(true);
    return this;
  }

  public void unsetField60() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD60_ISSET_ID);
  }

  /** Returns true if field field60 is set (has been assigned a value) and false otherwise */
  public boolean isSetField60() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD60_ISSET_ID);
  }

  public void setField60IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD60_ISSET_ID, value);
  }

  public int getField67() {
    return this.field67;
  }

  public BenchmarkMessage setField67(int field67) {
    this.field67 = field67;
    setField67IsSet(true);
    return this;
  }

  public void unsetField67() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD67_ISSET_ID);
  }

  /** Returns true if field field67 is set (has been assigned a value) and false otherwise */
  public boolean isSetField67() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD67_ISSET_ID);
  }

  public void setField67IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD67_ISSET_ID, value);
  }

  public int getField68() {
    return this.field68;
  }

  public BenchmarkMessage setField68(int field68) {
    this.field68 = field68;
    setField68IsSet(true);
    return this;
  }

  public void unsetField68() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD68_ISSET_ID);
  }

  /** Returns true if field field68 is set (has been assigned a value) and false otherwise */
  public boolean isSetField68() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD68_ISSET_ID);
  }

  public void setField68IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD68_ISSET_ID, value);
  }

  public boolean isField78() {
    return this.field78;
  }

  public BenchmarkMessage setField78(boolean field78) {
    this.field78 = field78;
    setField78IsSet(true);
    return this;
  }

  public void unsetField78() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD78_ISSET_ID);
  }

  /** Returns true if field field78 is set (has been assigned a value) and false otherwise */
  public boolean isSetField78() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD78_ISSET_ID);
  }

  public void setField78IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD78_ISSET_ID, value);
  }

  public boolean isField80() {
    return this.field80;
  }

  public BenchmarkMessage setField80(boolean field80) {
    this.field80 = field80;
    setField80IsSet(true);
    return this;
  }

  public void unsetField80() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD80_ISSET_ID);
  }

  /** Returns true if field field80 is set (has been assigned a value) and false otherwise */
  public boolean isSetField80() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD80_ISSET_ID);
  }

  public void setField80IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD80_ISSET_ID, value);
  }

  public boolean isField81() {
    return this.field81;
  }

  public BenchmarkMessage setField81(boolean field81) {
    this.field81 = field81;
    setField81IsSet(true);
    return this;
  }

  public void unsetField81() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD81_ISSET_ID);
  }

  /** Returns true if field field81 is set (has been assigned a value) and false otherwise */
  public boolean isSetField81() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD81_ISSET_ID);
  }

  public void setField81IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD81_ISSET_ID, value);
  }

  public int getField100() {
    return this.field100;
  }

  public BenchmarkMessage setField100(int field100) {
    this.field100 = field100;
    setField100IsSet(true);
    return this;
  }

  public void unsetField100() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD100_ISSET_ID);
  }

  /** Returns true if field field100 is set (has been assigned a value) and false otherwise */
  public boolean isSetField100() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD100_ISSET_ID);
  }

  public void setField100IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD100_ISSET_ID, value);
  }

  public int getField101() {
    return this.field101;
  }

  public BenchmarkMessage setField101(int field101) {
    this.field101 = field101;
    setField101IsSet(true);
    return this;
  }

  public void unsetField101() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD101_ISSET_ID);
  }

  /** Returns true if field field101 is set (has been assigned a value) and false otherwise */
  public boolean isSetField101() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD101_ISSET_ID);
  }

  public void setField101IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD101_ISSET_ID, value);
  }

  public String getField102() {
    return this.field102;
  }

  public BenchmarkMessage setField102(String field102) {
    this.field102 = field102;
    return this;
  }

  public void unsetField102() {
    this.field102 = null;
  }

  /** Returns true if field field102 is set (has been assigned a value) and false otherwise */
  public boolean isSetField102() {
    return this.field102 != null;
  }

  public void setField102IsSet(boolean value) {
    if (!value) {
      this.field102 = null;
    }
  }

  public String getField103() {
    return this.field103;
  }

  public BenchmarkMessage setField103(String field103) {
    this.field103 = field103;
    return this;
  }

  public void unsetField103() {
    this.field103 = null;
  }

  /** Returns true if field field103 is set (has been assigned a value) and false otherwise */
  public boolean isSetField103() {
    return this.field103 != null;
  }

  public void setField103IsSet(boolean value) {
    if (!value) {
      this.field103 = null;
    }
  }

  public int getField104() {
    return this.field104;
  }

  public BenchmarkMessage setField104(int field104) {
    this.field104 = field104;
    setField104IsSet(true);
    return this;
  }

  public void unsetField104() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD104_ISSET_ID);
  }

  /** Returns true if field field104 is set (has been assigned a value) and false otherwise */
  public boolean isSetField104() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD104_ISSET_ID);
  }

  public void setField104IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD104_ISSET_ID, value);
  }

  public int getField128() {
    return this.field128;
  }

  public BenchmarkMessage setField128(int field128) {
    this.field128 = field128;
    setField128IsSet(true);
    return this;
  }

  public void unsetField128() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD128_ISSET_ID);
  }

  /** Returns true if field field128 is set (has been assigned a value) and false otherwise */
  public boolean isSetField128() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD128_ISSET_ID);
  }

  public void setField128IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD128_ISSET_ID, value);
  }

  public String getField129() {
    return this.field129;
  }

  public BenchmarkMessage setField129(String field129) {
    this.field129 = field129;
    return this;
  }

  public void unsetField129() {
    this.field129 = null;
  }

  /** Returns true if field field129 is set (has been assigned a value) and false otherwise */
  public boolean isSetField129() {
    return this.field129 != null;
  }

  public void setField129IsSet(boolean value) {
    if (!value) {
      this.field129 = null;
    }
  }

  public int getField130() {
    return this.field130;
  }

  public BenchmarkMessage setField130(int field130) {
    this.field130 = field130;
    setField130IsSet(true);
    return this;
  }

  public void unsetField130() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD130_ISSET_ID);
  }

  /** Returns true if field field130 is set (has been assigned a value) and false otherwise */
  public boolean isSetField130() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD130_ISSET_ID);
  }

  public void setField130IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD130_ISSET_ID, value);
  }

  public int getField131() {
    return this.field131;
  }

  public BenchmarkMessage setField131(int field131) {
    this.field131 = field131;
    setField131IsSet(true);
    return this;
  }

  public void unsetField131() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD131_ISSET_ID);
  }

  /** Returns true if field field131 is set (has been assigned a value) and false otherwise */
  public boolean isSetField131() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD131_ISSET_ID);
  }

  public void setField131IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD131_ISSET_ID, value);
  }

  public int getField150() {
    return this.field150;
  }

  public BenchmarkMessage setField150(int field150) {
    this.field150 = field150;
    setField150IsSet(true);
    return this;
  }

  public void unsetField150() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD150_ISSET_ID);
  }

  /** Returns true if field field150 is set (has been assigned a value) and false otherwise */
  public boolean isSetField150() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD150_ISSET_ID);
  }

  public void setField150IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD150_ISSET_ID, value);
  }

  public int getField271() {
    return this.field271;
  }

  public BenchmarkMessage setField271(int field271) {
    this.field271 = field271;
    setField271IsSet(true);
    return this;
  }

  public void unsetField271() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD271_ISSET_ID);
  }

  /** Returns true if field field271 is set (has been assigned a value) and false otherwise */
  public boolean isSetField271() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD271_ISSET_ID);
  }

  public void setField271IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD271_ISSET_ID, value);
  }

  public int getField272() {
    return this.field272;
  }

  public BenchmarkMessage setField272(int field272) {
    this.field272 = field272;
    setField272IsSet(true);
    return this;
  }

  public void unsetField272() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD272_ISSET_ID);
  }

  /** Returns true if field field272 is set (has been assigned a value) and false otherwise */
  public boolean isSetField272() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD272_ISSET_ID);
  }

  public void setField272IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD272_ISSET_ID, value);
  }

  public int getField280() {
    return this.field280;
  }

  public BenchmarkMessage setField280(int field280) {
    this.field280 = field280;
    setField280IsSet(true);
    return this;
  }

  public void unsetField280() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD280_ISSET_ID);
  }

  /** Returns true if field field280 is set (has been assigned a value) and false otherwise */
  public boolean isSetField280() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD280_ISSET_ID);
  }

  public void setField280IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD280_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD1:
      if (value == null) {
        unsetField1();
      } else {
        setField1((String)value);
      }
      break;

    case FIELD2:
      if (value == null) {
        unsetField2();
      } else {
        setField2((Integer)value);
      }
      break;

    case FIELD3:
      if (value == null) {
        unsetField3();
      } else {
        setField3((Integer)value);
      }
      break;

    case FIELD4:
      if (value == null) {
        unsetField4();
      } else {
        setField4((String)value);
      }
      break;

    case FIELD5:
      if (value == null) {
        unsetField5();
      } else {
        setField5((Long)value);
      }
      break;

    case FIELD6:
      if (value == null) {
        unsetField6();
      } else {
        setField6((Integer)value);
      }
      break;

    case FIELD7:
      if (value == null) {
        unsetField7();
      } else {
        setField7((String)value);
      }
      break;

    case FIELD9:
      if (value == null) {
        unsetField9();
      } else {
        setField9((String)value);
      }
      break;

    case FIELD12:
      if (value == null) {
        unsetField12();
      } else {
        setField12((Boolean)value);
      }
      break;

    case FIELD13:
      if (value == null) {
        unsetField13();
      } else {
        setField13((Boolean)value);
      }
      break;

    case FIELD14:
      if (value == null) {
        unsetField14();
      } else {
        setField14((Boolean)value);
      }
      break;

    case FIELD16:
      if (value == null) {
        unsetField16();
      } else {
        setField16((Integer)value);
      }
      break;

    case FIELD17:
      if (value == null) {
        unsetField17();
      } else {
        setField17((Boolean)value);
      }
      break;

    case FIELD18:
      if (value == null) {
        unsetField18();
      } else {
        setField18((String)value);
      }
      break;

    case FIELD22:
      if (value == null) {
        unsetField22();
      } else {
        setField22((Long)value);
      }
      break;

    case FIELD23:
      if (value == null) {
        unsetField23();
      } else {
        setField23((Integer)value);
      }
      break;

    case FIELD24:
      if (value == null) {
        unsetField24();
      } else {
        setField24((Boolean)value);
      }
      break;

    case FIELD25:
      if (value == null) {
        unsetField25();
      } else {
        setField25((Integer)value);
      }
      break;

    case FIELD29:
      if (value == null) {
        unsetField29();
      } else {
        setField29((Integer)value);
      }
      break;

    case FIELD30:
      if (value == null) {
        unsetField30();
      } else {
        setField30((Boolean)value);
      }
      break;

    case FIELD59:
      if (value == null) {
        unsetField59();
      } else {
        setField59((Boolean)value);
      }
      break;

    case FIELD60:
      if (value == null) {
        unsetField60();
      } else {
        setField60((Integer)value);
      }
      break;

    case FIELD67:
      if (value == null) {
        unsetField67();
      } else {
        setField67((Integer)value);
      }
      break;

    case FIELD68:
      if (value == null) {
        unsetField68();
      } else {
        setField68((Integer)value);
      }
      break;

    case FIELD78:
      if (value == null) {
        unsetField78();
      } else {
        setField78((Boolean)value);
      }
      break;

    case FIELD80:
      if (value == null) {
        unsetField80();
      } else {
        setField80((Boolean)value);
      }
      break;

    case FIELD81:
      if (value == null) {
        unsetField81();
      } else {
        setField81((Boolean)value);
      }
      break;

    case FIELD100:
      if (value == null) {
        unsetField100();
      } else {
        setField100((Integer)value);
      }
      break;

    case FIELD101:
      if (value == null) {
        unsetField101();
      } else {
        setField101((Integer)value);
      }
      break;

    case FIELD102:
      if (value == null) {
        unsetField102();
      } else {
        setField102((String)value);
      }
      break;

    case FIELD103:
      if (value == null) {
        unsetField103();
      } else {
        setField103((String)value);
      }
      break;

    case FIELD104:
      if (value == null) {
        unsetField104();
      } else {
        setField104((Integer)value);
      }
      break;

    case FIELD128:
      if (value == null) {
        unsetField128();
      } else {
        setField128((Integer)value);
      }
      break;

    case FIELD129:
      if (value == null) {
        unsetField129();
      } else {
        setField129((String)value);
      }
      break;

    case FIELD130:
      if (value == null) {
        unsetField130();
      } else {
        setField130((Integer)value);
      }
      break;

    case FIELD131:
      if (value == null) {
        unsetField131();
      } else {
        setField131((Integer)value);
      }
      break;

    case FIELD150:
      if (value == null) {
        unsetField150();
      } else {
        setField150((Integer)value);
      }
      break;

    case FIELD271:
      if (value == null) {
        unsetField271();
      } else {
        setField271((Integer)value);
      }
      break;

    case FIELD272:
      if (value == null) {
        unsetField272();
      } else {
        setField272((Integer)value);
      }
      break;

    case FIELD280:
      if (value == null) {
        unsetField280();
      } else {
        setField280((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD1:
      return getField1();

    case FIELD2:
      return Integer.valueOf(getField2());

    case FIELD3:
      return Integer.valueOf(getField3());

    case FIELD4:
      return getField4();

    case FIELD5:
      return Long.valueOf(getField5());

    case FIELD6:
      return Integer.valueOf(getField6());

    case FIELD7:
      return getField7();

    case FIELD9:
      return getField9();

    case FIELD12:
      return Boolean.valueOf(isField12());

    case FIELD13:
      return Boolean.valueOf(isField13());

    case FIELD14:
      return Boolean.valueOf(isField14());

    case FIELD16:
      return Integer.valueOf(getField16());

    case FIELD17:
      return Boolean.valueOf(isField17());

    case FIELD18:
      return getField18();

    case FIELD22:
      return Long.valueOf(getField22());

    case FIELD23:
      return Integer.valueOf(getField23());

    case FIELD24:
      return Boolean.valueOf(isField24());

    case FIELD25:
      return Integer.valueOf(getField25());

    case FIELD29:
      return Integer.valueOf(getField29());

    case FIELD30:
      return Boolean.valueOf(isField30());

    case FIELD59:
      return Boolean.valueOf(isField59());

    case FIELD60:
      return Integer.valueOf(getField60());

    case FIELD67:
      return Integer.valueOf(getField67());

    case FIELD68:
      return Integer.valueOf(getField68());

    case FIELD78:
      return Boolean.valueOf(isField78());

    case FIELD80:
      return Boolean.valueOf(isField80());

    case FIELD81:
      return Boolean.valueOf(isField81());

    case FIELD100:
      return Integer.valueOf(getField100());

    case FIELD101:
      return Integer.valueOf(getField101());

    case FIELD102:
      return getField102();

    case FIELD103:
      return getField103();

    case FIELD104:
      return Integer.valueOf(getField104());

    case FIELD128:
      return Integer.valueOf(getField128());

    case FIELD129:
      return getField129();

    case FIELD130:
      return Integer.valueOf(getField130());

    case FIELD131:
      return Integer.valueOf(getField131());

    case FIELD150:
      return Integer.valueOf(getField150());

    case FIELD271:
      return Integer.valueOf(getField271());

    case FIELD272:
      return Integer.valueOf(getField272());

    case FIELD280:
      return Integer.valueOf(getField280());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD1:
      return isSetField1();
    case FIELD2:
      return isSetField2();
    case FIELD3:
      return isSetField3();
    case FIELD4:
      return isSetField4();
    case FIELD5:
      return isSetField5();
    case FIELD6:
      return isSetField6();
    case FIELD7:
      return isSetField7();
    case FIELD9:
      return isSetField9();
    case FIELD12:
      return isSetField12();
    case FIELD13:
      return isSetField13();
    case FIELD14:
      return isSetField14();
    case FIELD16:
      return isSetField16();
    case FIELD17:
      return isSetField17();
    case FIELD18:
      return isSetField18();
    case FIELD22:
      return isSetField22();
    case FIELD23:
      return isSetField23();
    case FIELD24:
      return isSetField24();
    case FIELD25:
      return isSetField25();
    case FIELD29:
      return isSetField29();
    case FIELD30:
      return isSetField30();
    case FIELD59:
      return isSetField59();
    case FIELD60:
      return isSetField60();
    case FIELD67:
      return isSetField67();
    case FIELD68:
      return isSetField68();
    case FIELD78:
      return isSetField78();
    case FIELD80:
      return isSetField80();
    case FIELD81:
      return isSetField81();
    case FIELD100:
      return isSetField100();
    case FIELD101:
      return isSetField101();
    case FIELD102:
      return isSetField102();
    case FIELD103:
      return isSetField103();
    case FIELD104:
      return isSetField104();
    case FIELD128:
      return isSetField128();
    case FIELD129:
      return isSetField129();
    case FIELD130:
      return isSetField130();
    case FIELD131:
      return isSetField131();
    case FIELD150:
      return isSetField150();
    case FIELD271:
      return isSetField271();
    case FIELD272:
      return isSetField272();
    case FIELD280:
      return isSetField280();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BenchmarkMessage)
      return this.equals((BenchmarkMessage)that);
    return false;
  }

  public boolean equals(BenchmarkMessage that) {
    if (that == null)
      return false;

    boolean this_present_field1 = true && this.isSetField1();
    boolean that_present_field1 = true && that.isSetField1();
    if (this_present_field1 || that_present_field1) {
      if (!(this_present_field1 && that_present_field1))
        return false;
      if (!this.field1.equals(that.field1))
        return false;
    }

    boolean this_present_field2 = true;
    boolean that_present_field2 = true;
    if (this_present_field2 || that_present_field2) {
      if (!(this_present_field2 && that_present_field2))
        return false;
      if (this.field2 != that.field2)
        return false;
    }

    boolean this_present_field3 = true;
    boolean that_present_field3 = true;
    if (this_present_field3 || that_present_field3) {
      if (!(this_present_field3 && that_present_field3))
        return false;
      if (this.field3 != that.field3)
        return false;
    }

    boolean this_present_field4 = true && this.isSetField4();
    boolean that_present_field4 = true && that.isSetField4();
    if (this_present_field4 || that_present_field4) {
      if (!(this_present_field4 && that_present_field4))
        return false;
      if (!this.field4.equals(that.field4))
        return false;
    }

    boolean this_present_field5 = true;
    boolean that_present_field5 = true;
    if (this_present_field5 || that_present_field5) {
      if (!(this_present_field5 && that_present_field5))
        return false;
      if (this.field5 != that.field5)
        return false;
    }

    boolean this_present_field6 = true;
    boolean that_present_field6 = true;
    if (this_present_field6 || that_present_field6) {
      if (!(this_present_field6 && that_present_field6))
        return false;
      if (this.field6 != that.field6)
        return false;
    }

    boolean this_present_field7 = true && this.isSetField7();
    boolean that_present_field7 = true && that.isSetField7();
    if (this_present_field7 || that_present_field7) {
      if (!(this_present_field7 && that_present_field7))
        return false;
      if (!this.field7.equals(that.field7))
        return false;
    }

    boolean this_present_field9 = true && this.isSetField9();
    boolean that_present_field9 = true && that.isSetField9();
    if (this_present_field9 || that_present_field9) {
      if (!(this_present_field9 && that_present_field9))
        return false;
      if (!this.field9.equals(that.field9))
        return false;
    }

    boolean this_present_field12 = true;
    boolean that_present_field12 = true;
    if (this_present_field12 || that_present_field12) {
      if (!(this_present_field12 && that_present_field12))
        return false;
      if (this.field12 != that.field12)
        return false;
    }

    boolean this_present_field13 = true;
    boolean that_present_field13 = true;
    if (this_present_field13 || that_present_field13) {
      if (!(this_present_field13 && that_present_field13))
        return false;
      if (this.field13 != that.field13)
        return false;
    }

    boolean this_present_field14 = true;
    boolean that_present_field14 = true;
    if (this_present_field14 || that_present_field14) {
      if (!(this_present_field14 && that_present_field14))
        return false;
      if (this.field14 != that.field14)
        return false;
    }

    boolean this_present_field16 = true;
    boolean that_present_field16 = true;
    if (this_present_field16 || that_present_field16) {
      if (!(this_present_field16 && that_present_field16))
        return false;
      if (this.field16 != that.field16)
        return false;
    }

    boolean this_present_field17 = true;
    boolean that_present_field17 = true;
    if (this_present_field17 || that_present_field17) {
      if (!(this_present_field17 && that_present_field17))
        return false;
      if (this.field17 != that.field17)
        return false;
    }

    boolean this_present_field18 = true && this.isSetField18();
    boolean that_present_field18 = true && that.isSetField18();
    if (this_present_field18 || that_present_field18) {
      if (!(this_present_field18 && that_present_field18))
        return false;
      if (!this.field18.equals(that.field18))
        return false;
    }

    boolean this_present_field22 = true;
    boolean that_present_field22 = true;
    if (this_present_field22 || that_present_field22) {
      if (!(this_present_field22 && that_present_field22))
        return false;
      if (this.field22 != that.field22)
        return false;
    }

    boolean this_present_field23 = true;
    boolean that_present_field23 = true;
    if (this_present_field23 || that_present_field23) {
      if (!(this_present_field23 && that_present_field23))
        return false;
      if (this.field23 != that.field23)
        return false;
    }

    boolean this_present_field24 = true;
    boolean that_present_field24 = true;
    if (this_present_field24 || that_present_field24) {
      if (!(this_present_field24 && that_present_field24))
        return false;
      if (this.field24 != that.field24)
        return false;
    }

    boolean this_present_field25 = true;
    boolean that_present_field25 = true;
    if (this_present_field25 || that_present_field25) {
      if (!(this_present_field25 && that_present_field25))
        return false;
      if (this.field25 != that.field25)
        return false;
    }

    boolean this_present_field29 = true;
    boolean that_present_field29 = true;
    if (this_present_field29 || that_present_field29) {
      if (!(this_present_field29 && that_present_field29))
        return false;
      if (this.field29 != that.field29)
        return false;
    }

    boolean this_present_field30 = true;
    boolean that_present_field30 = true;
    if (this_present_field30 || that_present_field30) {
      if (!(this_present_field30 && that_present_field30))
        return false;
      if (this.field30 != that.field30)
        return false;
    }

    boolean this_present_field59 = true;
    boolean that_present_field59 = true;
    if (this_present_field59 || that_present_field59) {
      if (!(this_present_field59 && that_present_field59))
        return false;
      if (this.field59 != that.field59)
        return false;
    }

    boolean this_present_field60 = true;
    boolean that_present_field60 = true;
    if (this_present_field60 || that_present_field60) {
      if (!(this_present_field60 && that_present_field60))
        return false;
      if (this.field60 != that.field60)
        return false;
    }

    boolean this_present_field67 = true;
    boolean that_present_field67 = true;
    if (this_present_field67 || that_present_field67) {
      if (!(this_present_field67 && that_present_field67))
        return false;
      if (this.field67 != that.field67)
        return false;
    }

    boolean this_present_field68 = true;
    boolean that_present_field68 = true;
    if (this_present_field68 || that_present_field68) {
      if (!(this_present_field68 && that_present_field68))
        return false;
      if (this.field68 != that.field68)
        return false;
    }

    boolean this_present_field78 = true;
    boolean that_present_field78 = true;
    if (this_present_field78 || that_present_field78) {
      if (!(this_present_field78 && that_present_field78))
        return false;
      if (this.field78 != that.field78)
        return false;
    }

    boolean this_present_field80 = true;
    boolean that_present_field80 = true;
    if (this_present_field80 || that_present_field80) {
      if (!(this_present_field80 && that_present_field80))
        return false;
      if (this.field80 != that.field80)
        return false;
    }

    boolean this_present_field81 = true;
    boolean that_present_field81 = true;
    if (this_present_field81 || that_present_field81) {
      if (!(this_present_field81 && that_present_field81))
        return false;
      if (this.field81 != that.field81)
        return false;
    }

    boolean this_present_field100 = true;
    boolean that_present_field100 = true;
    if (this_present_field100 || that_present_field100) {
      if (!(this_present_field100 && that_present_field100))
        return false;
      if (this.field100 != that.field100)
        return false;
    }

    boolean this_present_field101 = true;
    boolean that_present_field101 = true;
    if (this_present_field101 || that_present_field101) {
      if (!(this_present_field101 && that_present_field101))
        return false;
      if (this.field101 != that.field101)
        return false;
    }

    boolean this_present_field102 = true && this.isSetField102();
    boolean that_present_field102 = true && that.isSetField102();
    if (this_present_field102 || that_present_field102) {
      if (!(this_present_field102 && that_present_field102))
        return false;
      if (!this.field102.equals(that.field102))
        return false;
    }

    boolean this_present_field103 = true && this.isSetField103();
    boolean that_present_field103 = true && that.isSetField103();
    if (this_present_field103 || that_present_field103) {
      if (!(this_present_field103 && that_present_field103))
        return false;
      if (!this.field103.equals(that.field103))
        return false;
    }

    boolean this_present_field104 = true;
    boolean that_present_field104 = true;
    if (this_present_field104 || that_present_field104) {
      if (!(this_present_field104 && that_present_field104))
        return false;
      if (this.field104 != that.field104)
        return false;
    }

    boolean this_present_field128 = true;
    boolean that_present_field128 = true;
    if (this_present_field128 || that_present_field128) {
      if (!(this_present_field128 && that_present_field128))
        return false;
      if (this.field128 != that.field128)
        return false;
    }

    boolean this_present_field129 = true && this.isSetField129();
    boolean that_present_field129 = true && that.isSetField129();
    if (this_present_field129 || that_present_field129) {
      if (!(this_present_field129 && that_present_field129))
        return false;
      if (!this.field129.equals(that.field129))
        return false;
    }

    boolean this_present_field130 = true;
    boolean that_present_field130 = true;
    if (this_present_field130 || that_present_field130) {
      if (!(this_present_field130 && that_present_field130))
        return false;
      if (this.field130 != that.field130)
        return false;
    }

    boolean this_present_field131 = true;
    boolean that_present_field131 = true;
    if (this_present_field131 || that_present_field131) {
      if (!(this_present_field131 && that_present_field131))
        return false;
      if (this.field131 != that.field131)
        return false;
    }

    boolean this_present_field150 = true;
    boolean that_present_field150 = true;
    if (this_present_field150 || that_present_field150) {
      if (!(this_present_field150 && that_present_field150))
        return false;
      if (this.field150 != that.field150)
        return false;
    }

    boolean this_present_field271 = true;
    boolean that_present_field271 = true;
    if (this_present_field271 || that_present_field271) {
      if (!(this_present_field271 && that_present_field271))
        return false;
      if (this.field271 != that.field271)
        return false;
    }

    boolean this_present_field272 = true;
    boolean that_present_field272 = true;
    if (this_present_field272 || that_present_field272) {
      if (!(this_present_field272 && that_present_field272))
        return false;
      if (this.field272 != that.field272)
        return false;
    }

    boolean this_present_field280 = true;
    boolean that_present_field280 = true;
    if (this_present_field280 || that_present_field280) {
      if (!(this_present_field280 && that_present_field280))
        return false;
      if (this.field280 != that.field280)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BenchmarkMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetField1()).compareTo(other.isSetField1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field1, other.field1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField2()).compareTo(other.isSetField2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field2, other.field2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField3()).compareTo(other.isSetField3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field3, other.field3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField4()).compareTo(other.isSetField4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field4, other.field4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField5()).compareTo(other.isSetField5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field5, other.field5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField6()).compareTo(other.isSetField6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field6, other.field6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField7()).compareTo(other.isSetField7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field7, other.field7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField9()).compareTo(other.isSetField9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field9, other.field9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField12()).compareTo(other.isSetField12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field12, other.field12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField13()).compareTo(other.isSetField13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field13, other.field13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField14()).compareTo(other.isSetField14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field14, other.field14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField16()).compareTo(other.isSetField16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field16, other.field16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField17()).compareTo(other.isSetField17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field17, other.field17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField18()).compareTo(other.isSetField18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field18, other.field18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField22()).compareTo(other.isSetField22());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField22()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field22, other.field22);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField23()).compareTo(other.isSetField23());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField23()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field23, other.field23);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField24()).compareTo(other.isSetField24());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField24()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field24, other.field24);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField25()).compareTo(other.isSetField25());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField25()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field25, other.field25);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField29()).compareTo(other.isSetField29());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField29()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field29, other.field29);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField30()).compareTo(other.isSetField30());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField30()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field30, other.field30);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField59()).compareTo(other.isSetField59());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField59()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field59, other.field59);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField60()).compareTo(other.isSetField60());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField60()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field60, other.field60);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField67()).compareTo(other.isSetField67());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField67()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field67, other.field67);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField68()).compareTo(other.isSetField68());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField68()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field68, other.field68);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField78()).compareTo(other.isSetField78());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField78()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field78, other.field78);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField80()).compareTo(other.isSetField80());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField80()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field80, other.field80);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField81()).compareTo(other.isSetField81());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField81()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field81, other.field81);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField100()).compareTo(other.isSetField100());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField100()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field100, other.field100);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField101()).compareTo(other.isSetField101());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField101()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field101, other.field101);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField102()).compareTo(other.isSetField102());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField102()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field102, other.field102);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField103()).compareTo(other.isSetField103());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField103()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field103, other.field103);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField104()).compareTo(other.isSetField104());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField104()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field104, other.field104);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField128()).compareTo(other.isSetField128());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField128()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field128, other.field128);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField129()).compareTo(other.isSetField129());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField129()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field129, other.field129);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField130()).compareTo(other.isSetField130());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField130()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field130, other.field130);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField131()).compareTo(other.isSetField131());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField131()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field131, other.field131);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField150()).compareTo(other.isSetField150());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField150()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field150, other.field150);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField271()).compareTo(other.isSetField271());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField271()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field271, other.field271);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField272()).compareTo(other.isSetField272());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField272()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field272, other.field272);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField280()).compareTo(other.isSetField280());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField280()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field280, other.field280);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BenchmarkMessage(");
    boolean first = true;

    sb.append("field1:");
    if (this.field1 == null) {
      sb.append("null");
    } else {
      sb.append(this.field1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field2:");
    sb.append(this.field2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field3:");
    sb.append(this.field3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field4:");
    if (this.field4 == null) {
      sb.append("null");
    } else {
      sb.append(this.field4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field5:");
    sb.append(this.field5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field6:");
    sb.append(this.field6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field7:");
    if (this.field7 == null) {
      sb.append("null");
    } else {
      sb.append(this.field7);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field9:");
    if (this.field9 == null) {
      sb.append("null");
    } else {
      sb.append(this.field9);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field12:");
    sb.append(this.field12);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field13:");
    sb.append(this.field13);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field14:");
    sb.append(this.field14);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field16:");
    sb.append(this.field16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field17:");
    sb.append(this.field17);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field18:");
    if (this.field18 == null) {
      sb.append("null");
    } else {
      sb.append(this.field18);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field22:");
    sb.append(this.field22);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field23:");
    sb.append(this.field23);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field24:");
    sb.append(this.field24);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field25:");
    sb.append(this.field25);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field29:");
    sb.append(this.field29);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field30:");
    sb.append(this.field30);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field59:");
    sb.append(this.field59);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field60:");
    sb.append(this.field60);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field67:");
    sb.append(this.field67);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field68:");
    sb.append(this.field68);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field78:");
    sb.append(this.field78);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field80:");
    sb.append(this.field80);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field81:");
    sb.append(this.field81);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field100:");
    sb.append(this.field100);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field101:");
    sb.append(this.field101);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field102:");
    if (this.field102 == null) {
      sb.append("null");
    } else {
      sb.append(this.field102);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field103:");
    if (this.field103 == null) {
      sb.append("null");
    } else {
      sb.append(this.field103);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field104:");
    sb.append(this.field104);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field128:");
    sb.append(this.field128);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field129:");
    if (this.field129 == null) {
      sb.append("null");
    } else {
      sb.append(this.field129);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field130:");
    sb.append(this.field130);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field131:");
    sb.append(this.field131);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field150:");
    sb.append(this.field150);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field271:");
    sb.append(this.field271);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field272:");
    sb.append(this.field272);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field280:");
    sb.append(this.field280);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BenchmarkMessageStandardSchemeFactory implements SchemeFactory {
    public BenchmarkMessageStandardScheme getScheme() {
      return new BenchmarkMessageStandardScheme();
    }
  }

  private static class BenchmarkMessageStandardScheme extends StandardScheme<BenchmarkMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BenchmarkMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field1 = iprot.readString();
              struct.setField1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field2 = iprot.readI32();
              struct.setField2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field3 = iprot.readI32();
              struct.setField3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field4 = iprot.readString();
              struct.setField4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD5
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.field5 = iprot.readI64();
              struct.setField5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FIELD6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field6 = iprot.readI32();
              struct.setField6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELD7
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field7 = iprot.readString();
              struct.setField7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIELD9
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field9 = iprot.readString();
              struct.setField9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FIELD12
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field12 = iprot.readBool();
              struct.setField12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FIELD13
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field13 = iprot.readBool();
              struct.setField13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FIELD14
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field14 = iprot.readBool();
              struct.setField14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FIELD16
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field16 = iprot.readI32();
              struct.setField16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FIELD17
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field17 = iprot.readBool();
              struct.setField17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FIELD18
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field18 = iprot.readString();
              struct.setField18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FIELD22
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.field22 = iprot.readI64();
              struct.setField22IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FIELD23
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field23 = iprot.readI32();
              struct.setField23IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // FIELD24
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field24 = iprot.readBool();
              struct.setField24IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FIELD25
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field25 = iprot.readI32();
              struct.setField25IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // FIELD29
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field29 = iprot.readI32();
              struct.setField29IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FIELD30
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field30 = iprot.readBool();
              struct.setField30IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // FIELD59
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field59 = iprot.readBool();
              struct.setField59IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // FIELD60
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field60 = iprot.readI32();
              struct.setField60IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // FIELD67
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field67 = iprot.readI32();
              struct.setField67IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // FIELD68
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field68 = iprot.readI32();
              struct.setField68IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // FIELD78
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field78 = iprot.readBool();
              struct.setField78IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // FIELD80
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field80 = iprot.readBool();
              struct.setField80IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // FIELD81
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.field81 = iprot.readBool();
              struct.setField81IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // FIELD100
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field100 = iprot.readI32();
              struct.setField100IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FIELD101
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field101 = iprot.readI32();
              struct.setField101IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // FIELD102
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field102 = iprot.readString();
              struct.setField102IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // FIELD103
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field103 = iprot.readString();
              struct.setField103IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // FIELD104
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field104 = iprot.readI32();
              struct.setField104IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 128: // FIELD128
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field128 = iprot.readI32();
              struct.setField128IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 129: // FIELD129
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field129 = iprot.readString();
              struct.setField129IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 130: // FIELD130
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field130 = iprot.readI32();
              struct.setField130IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 131: // FIELD131
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field131 = iprot.readI32();
              struct.setField131IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 150: // FIELD150
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field150 = iprot.readI32();
              struct.setField150IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 271: // FIELD271
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field271 = iprot.readI32();
              struct.setField271IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 272: // FIELD272
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field272 = iprot.readI32();
              struct.setField272IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 280: // FIELD280
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field280 = iprot.readI32();
              struct.setField280IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BenchmarkMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.field1 != null) {
        oprot.writeFieldBegin(FIELD1_FIELD_DESC);
        oprot.writeString(struct.field1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD2_FIELD_DESC);
      oprot.writeI32(struct.field2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD3_FIELD_DESC);
      oprot.writeI32(struct.field3);
      oprot.writeFieldEnd();
      if (struct.field4 != null) {
        oprot.writeFieldBegin(FIELD4_FIELD_DESC);
        oprot.writeString(struct.field4);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD5_FIELD_DESC);
      oprot.writeI64(struct.field5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD6_FIELD_DESC);
      oprot.writeI32(struct.field6);
      oprot.writeFieldEnd();
      if (struct.field7 != null) {
        oprot.writeFieldBegin(FIELD7_FIELD_DESC);
        oprot.writeString(struct.field7);
        oprot.writeFieldEnd();
      }
      if (struct.field9 != null) {
        oprot.writeFieldBegin(FIELD9_FIELD_DESC);
        oprot.writeString(struct.field9);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD12_FIELD_DESC);
      oprot.writeBool(struct.field12);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD13_FIELD_DESC);
      oprot.writeBool(struct.field13);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD14_FIELD_DESC);
      oprot.writeBool(struct.field14);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD16_FIELD_DESC);
      oprot.writeI32(struct.field16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD17_FIELD_DESC);
      oprot.writeBool(struct.field17);
      oprot.writeFieldEnd();
      if (struct.field18 != null) {
        oprot.writeFieldBegin(FIELD18_FIELD_DESC);
        oprot.writeString(struct.field18);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD22_FIELD_DESC);
      oprot.writeI64(struct.field22);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD23_FIELD_DESC);
      oprot.writeI32(struct.field23);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD24_FIELD_DESC);
      oprot.writeBool(struct.field24);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD25_FIELD_DESC);
      oprot.writeI32(struct.field25);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD29_FIELD_DESC);
      oprot.writeI32(struct.field29);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD30_FIELD_DESC);
      oprot.writeBool(struct.field30);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD59_FIELD_DESC);
      oprot.writeBool(struct.field59);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD60_FIELD_DESC);
      oprot.writeI32(struct.field60);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD67_FIELD_DESC);
      oprot.writeI32(struct.field67);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD68_FIELD_DESC);
      oprot.writeI32(struct.field68);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD78_FIELD_DESC);
      oprot.writeBool(struct.field78);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD80_FIELD_DESC);
      oprot.writeBool(struct.field80);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD81_FIELD_DESC);
      oprot.writeBool(struct.field81);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD100_FIELD_DESC);
      oprot.writeI32(struct.field100);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD101_FIELD_DESC);
      oprot.writeI32(struct.field101);
      oprot.writeFieldEnd();
      if (struct.field102 != null) {
        oprot.writeFieldBegin(FIELD102_FIELD_DESC);
        oprot.writeString(struct.field102);
        oprot.writeFieldEnd();
      }
      if (struct.field103 != null) {
        oprot.writeFieldBegin(FIELD103_FIELD_DESC);
        oprot.writeString(struct.field103);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD104_FIELD_DESC);
      oprot.writeI32(struct.field104);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD128_FIELD_DESC);
      oprot.writeI32(struct.field128);
      oprot.writeFieldEnd();
      if (struct.field129 != null) {
        oprot.writeFieldBegin(FIELD129_FIELD_DESC);
        oprot.writeString(struct.field129);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD130_FIELD_DESC);
      oprot.writeI32(struct.field130);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD131_FIELD_DESC);
      oprot.writeI32(struct.field131);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD150_FIELD_DESC);
      oprot.writeI32(struct.field150);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD271_FIELD_DESC);
      oprot.writeI32(struct.field271);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD272_FIELD_DESC);
      oprot.writeI32(struct.field272);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD280_FIELD_DESC);
      oprot.writeI32(struct.field280);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BenchmarkMessageTupleSchemeFactory implements SchemeFactory {
    public BenchmarkMessageTupleScheme getScheme() {
      return new BenchmarkMessageTupleScheme();
    }
  }

  private static class BenchmarkMessageTupleScheme extends TupleScheme<BenchmarkMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BenchmarkMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetField1()) {
        optionals.set(0);
      }
      if (struct.isSetField2()) {
        optionals.set(1);
      }
      if (struct.isSetField3()) {
        optionals.set(2);
      }
      if (struct.isSetField4()) {
        optionals.set(3);
      }
      if (struct.isSetField5()) {
        optionals.set(4);
      }
      if (struct.isSetField6()) {
        optionals.set(5);
      }
      if (struct.isSetField7()) {
        optionals.set(6);
      }
      if (struct.isSetField9()) {
        optionals.set(7);
      }
      if (struct.isSetField12()) {
        optionals.set(8);
      }
      if (struct.isSetField13()) {
        optionals.set(9);
      }
      if (struct.isSetField14()) {
        optionals.set(10);
      }
      if (struct.isSetField16()) {
        optionals.set(11);
      }
      if (struct.isSetField17()) {
        optionals.set(12);
      }
      if (struct.isSetField18()) {
        optionals.set(13);
      }
      if (struct.isSetField22()) {
        optionals.set(14);
      }
      if (struct.isSetField23()) {
        optionals.set(15);
      }
      if (struct.isSetField24()) {
        optionals.set(16);
      }
      if (struct.isSetField25()) {
        optionals.set(17);
      }
      if (struct.isSetField29()) {
        optionals.set(18);
      }
      if (struct.isSetField30()) {
        optionals.set(19);
      }
      if (struct.isSetField59()) {
        optionals.set(20);
      }
      if (struct.isSetField60()) {
        optionals.set(21);
      }
      if (struct.isSetField67()) {
        optionals.set(22);
      }
      if (struct.isSetField68()) {
        optionals.set(23);
      }
      if (struct.isSetField78()) {
        optionals.set(24);
      }
      if (struct.isSetField80()) {
        optionals.set(25);
      }
      if (struct.isSetField81()) {
        optionals.set(26);
      }
      if (struct.isSetField100()) {
        optionals.set(27);
      }
      if (struct.isSetField101()) {
        optionals.set(28);
      }
      if (struct.isSetField102()) {
        optionals.set(29);
      }
      if (struct.isSetField103()) {
        optionals.set(30);
      }
      if (struct.isSetField104()) {
        optionals.set(31);
      }
      if (struct.isSetField128()) {
        optionals.set(32);
      }
      if (struct.isSetField129()) {
        optionals.set(33);
      }
      if (struct.isSetField130()) {
        optionals.set(34);
      }
      if (struct.isSetField131()) {
        optionals.set(35);
      }
      if (struct.isSetField150()) {
        optionals.set(36);
      }
      if (struct.isSetField271()) {
        optionals.set(37);
      }
      if (struct.isSetField272()) {
        optionals.set(38);
      }
      if (struct.isSetField280()) {
        optionals.set(39);
      }
      oprot.writeBitSet(optionals, 40);
      if (struct.isSetField1()) {
        oprot.writeString(struct.field1);
      }
      if (struct.isSetField2()) {
        oprot.writeI32(struct.field2);
      }
      if (struct.isSetField3()) {
        oprot.writeI32(struct.field3);
      }
      if (struct.isSetField4()) {
        oprot.writeString(struct.field4);
      }
      if (struct.isSetField5()) {
        oprot.writeI64(struct.field5);
      }
      if (struct.isSetField6()) {
        oprot.writeI32(struct.field6);
      }
      if (struct.isSetField7()) {
        oprot.writeString(struct.field7);
      }
      if (struct.isSetField9()) {
        oprot.writeString(struct.field9);
      }
      if (struct.isSetField12()) {
        oprot.writeBool(struct.field12);
      }
      if (struct.isSetField13()) {
        oprot.writeBool(struct.field13);
      }
      if (struct.isSetField14()) {
        oprot.writeBool(struct.field14);
      }
      if (struct.isSetField16()) {
        oprot.writeI32(struct.field16);
      }
      if (struct.isSetField17()) {
        oprot.writeBool(struct.field17);
      }
      if (struct.isSetField18()) {
        oprot.writeString(struct.field18);
      }
      if (struct.isSetField22()) {
        oprot.writeI64(struct.field22);
      }
      if (struct.isSetField23()) {
        oprot.writeI32(struct.field23);
      }
      if (struct.isSetField24()) {
        oprot.writeBool(struct.field24);
      }
      if (struct.isSetField25()) {
        oprot.writeI32(struct.field25);
      }
      if (struct.isSetField29()) {
        oprot.writeI32(struct.field29);
      }
      if (struct.isSetField30()) {
        oprot.writeBool(struct.field30);
      }
      if (struct.isSetField59()) {
        oprot.writeBool(struct.field59);
      }
      if (struct.isSetField60()) {
        oprot.writeI32(struct.field60);
      }
      if (struct.isSetField67()) {
        oprot.writeI32(struct.field67);
      }
      if (struct.isSetField68()) {
        oprot.writeI32(struct.field68);
      }
      if (struct.isSetField78()) {
        oprot.writeBool(struct.field78);
      }
      if (struct.isSetField80()) {
        oprot.writeBool(struct.field80);
      }
      if (struct.isSetField81()) {
        oprot.writeBool(struct.field81);
      }
      if (struct.isSetField100()) {
        oprot.writeI32(struct.field100);
      }
      if (struct.isSetField101()) {
        oprot.writeI32(struct.field101);
      }
      if (struct.isSetField102()) {
        oprot.writeString(struct.field102);
      }
      if (struct.isSetField103()) {
        oprot.writeString(struct.field103);
      }
      if (struct.isSetField104()) {
        oprot.writeI32(struct.field104);
      }
      if (struct.isSetField128()) {
        oprot.writeI32(struct.field128);
      }
      if (struct.isSetField129()) {
        oprot.writeString(struct.field129);
      }
      if (struct.isSetField130()) {
        oprot.writeI32(struct.field130);
      }
      if (struct.isSetField131()) {
        oprot.writeI32(struct.field131);
      }
      if (struct.isSetField150()) {
        oprot.writeI32(struct.field150);
      }
      if (struct.isSetField271()) {
        oprot.writeI32(struct.field271);
      }
      if (struct.isSetField272()) {
        oprot.writeI32(struct.field272);
      }
      if (struct.isSetField280()) {
        oprot.writeI32(struct.field280);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BenchmarkMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(40);
      if (incoming.get(0)) {
        struct.field1 = iprot.readString();
        struct.setField1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.field2 = iprot.readI32();
        struct.setField2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.field3 = iprot.readI32();
        struct.setField3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.field4 = iprot.readString();
        struct.setField4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.field5 = iprot.readI64();
        struct.setField5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.field6 = iprot.readI32();
        struct.setField6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.field7 = iprot.readString();
        struct.setField7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.field9 = iprot.readString();
        struct.setField9IsSet(true);
      }
      if (incoming.get(8)) {
        struct.field12 = iprot.readBool();
        struct.setField12IsSet(true);
      }
      if (incoming.get(9)) {
        struct.field13 = iprot.readBool();
        struct.setField13IsSet(true);
      }
      if (incoming.get(10)) {
        struct.field14 = iprot.readBool();
        struct.setField14IsSet(true);
      }
      if (incoming.get(11)) {
        struct.field16 = iprot.readI32();
        struct.setField16IsSet(true);
      }
      if (incoming.get(12)) {
        struct.field17 = iprot.readBool();
        struct.setField17IsSet(true);
      }
      if (incoming.get(13)) {
        struct.field18 = iprot.readString();
        struct.setField18IsSet(true);
      }
      if (incoming.get(14)) {
        struct.field22 = iprot.readI64();
        struct.setField22IsSet(true);
      }
      if (incoming.get(15)) {
        struct.field23 = iprot.readI32();
        struct.setField23IsSet(true);
      }
      if (incoming.get(16)) {
        struct.field24 = iprot.readBool();
        struct.setField24IsSet(true);
      }
      if (incoming.get(17)) {
        struct.field25 = iprot.readI32();
        struct.setField25IsSet(true);
      }
      if (incoming.get(18)) {
        struct.field29 = iprot.readI32();
        struct.setField29IsSet(true);
      }
      if (incoming.get(19)) {
        struct.field30 = iprot.readBool();
        struct.setField30IsSet(true);
      }
      if (incoming.get(20)) {
        struct.field59 = iprot.readBool();
        struct.setField59IsSet(true);
      }
      if (incoming.get(21)) {
        struct.field60 = iprot.readI32();
        struct.setField60IsSet(true);
      }
      if (incoming.get(22)) {
        struct.field67 = iprot.readI32();
        struct.setField67IsSet(true);
      }
      if (incoming.get(23)) {
        struct.field68 = iprot.readI32();
        struct.setField68IsSet(true);
      }
      if (incoming.get(24)) {
        struct.field78 = iprot.readBool();
        struct.setField78IsSet(true);
      }
      if (incoming.get(25)) {
        struct.field80 = iprot.readBool();
        struct.setField80IsSet(true);
      }
      if (incoming.get(26)) {
        struct.field81 = iprot.readBool();
        struct.setField81IsSet(true);
      }
      if (incoming.get(27)) {
        struct.field100 = iprot.readI32();
        struct.setField100IsSet(true);
      }
      if (incoming.get(28)) {
        struct.field101 = iprot.readI32();
        struct.setField101IsSet(true);
      }
      if (incoming.get(29)) {
        struct.field102 = iprot.readString();
        struct.setField102IsSet(true);
      }
      if (incoming.get(30)) {
        struct.field103 = iprot.readString();
        struct.setField103IsSet(true);
      }
      if (incoming.get(31)) {
        struct.field104 = iprot.readI32();
        struct.setField104IsSet(true);
      }
      if (incoming.get(32)) {
        struct.field128 = iprot.readI32();
        struct.setField128IsSet(true);
      }
      if (incoming.get(33)) {
        struct.field129 = iprot.readString();
        struct.setField129IsSet(true);
      }
      if (incoming.get(34)) {
        struct.field130 = iprot.readI32();
        struct.setField130IsSet(true);
      }
      if (incoming.get(35)) {
        struct.field131 = iprot.readI32();
        struct.setField131IsSet(true);
      }
      if (incoming.get(36)) {
        struct.field150 = iprot.readI32();
        struct.setField150IsSet(true);
      }
      if (incoming.get(37)) {
        struct.field271 = iprot.readI32();
        struct.setField271IsSet(true);
      }
      if (incoming.get(38)) {
        struct.field272 = iprot.readI32();
        struct.setField272IsSet(true);
      }
      if (incoming.get(39)) {
        struct.field280 = iprot.readI32();
        struct.setField280IsSet(true);
      }
    }
  }

}

